swagger: "2.0"
info:
  title: JeeekAPI
  description: エンジニアの活動支援プラットフォーム
  contact:
    name: tonouchi510
    email: tonouchi27@gmail.com
    url: https://github.com/tonouchi510/Jeeek/issues
  version: "0.1"
host: localhost:8080
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /v1/activity/co-service/batch:
    get:
      tags:
      - Activity
      summary: Refresh activities of all cooperation services Activity
      description: セッションに紐づくユーザの連携済みサービスのアクティビティを取得する
      operationId: Activity#Refresh activities of all cooperation services
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ActivityRefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/activity/co-service/qiita:
    get:
      tags:
      - Activity
      summary: Refresh qiita activities Activity
      description: セッションに紐づくユーザのQiitaの記事投稿を取得する
      operationId: Activity#Refresh qiita activities
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ActivityRefreshQiitaActivitiesUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/activity/co-service/qiita/initialization:
    get:
      tags:
      - Activity
      summary: Pick out all past activities of qiita Activity
      description: サービス連携時に連携以前のqiita記事投稿を全て反映させる
      operationId: Activity#Pick out all past activities of qiita
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ActivityPickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/activity/post:
    post:
      tags:
      - Activity
      summary: Manual post of activity Activity
      description: 手動投稿用のAPI
      operationId: Activity#Manual post of activity
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Manual Post Of ActivityRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/ActivityManualPostOfActivityRequestBody'
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ActivityManualPostOfActivityUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/admin/healthcheck:
    get:
      tags:
      - Admin
      summary: admin health-check Admin
      description: admin apiのhealth-check
      operationId: Admin#admin health-check
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminAdminHealthCheckResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminHealthCheckUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/admin/signin:
    post:
      tags:
      - Admin
      summary: admin signin Admin
      description: admin権限のトークンを取得します．
      operationId: Admin#admin signin
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Admin SigninRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AdminAdminSigninRequestBody'
          required:
          - uid
          - password
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminAdminSigninResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminSigninUnauthorizedResponseBody'
      schemes:
      - http
  /v1/admin/users:
    get:
      tags:
      - Admin
      summary: admin list user Admin
      description: ユーザーの一覧を返します。
      operationId: Admin#admin list user
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminJeeekUserResponseCollection'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminListUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    post:
      tags:
      - Admin
      summary: admin create new user Admin
      description: 新しいユーザーを登録します。
      operationId: Admin#admin create new user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Admin Create New UserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AdminAdminCreateNewUserRequestBody'
          required:
          - user_name
          - email_address
          - phone_number
          - photo_url
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/AdminAdminCreateNewUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminCreateNewUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/admin/users/{user_id}:
    get:
      tags:
      - Admin
      summary: admin get user Admin
      description: 指定したIDのユーザーの情報を返します。
      operationId: Admin#admin get user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: user_id
        in: path
        description: User id of firebase
        required: true
        type: string
        maxLength: 28
        minLength: 28
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminAdminGetUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminGetUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - Admin
      summary: admin update user Admin
      description: 指定したユーザー情報を更新します。
      operationId: Admin#admin update user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: user_id
        in: path
        description: User id of firebase
        required: true
        type: string
        maxLength: 28
        minLength: 28
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Admin Update UserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AdminAdminUpdateUserRequestBody'
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminAdminUpdateUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminUpdateUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    delete:
      tags:
      - Admin
      summary: admin delete user Admin
      description: 指定したユーザーを削除します。
      operationId: Admin#admin delete user
      parameters:
      - name: user_id
        in: path
        description: User id of firebase
        required: true
        type: string
        maxLength: 28
        minLength: 28
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "204":
          description: No Content response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminDeleteUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/users:
    get:
      tags:
      - User
      summary: List user User
      description: ユーザーの一覧を返します。
      operationId: User#List user
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserJeeekUserResponseCollection'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserListUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - User
      summary: Update user User
      description: 現在のセッションに紐付くユーザー情報を更新します。
      operationId: User#Update user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Update UserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserUpdateUserRequestBody'
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserUpdateUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserUpdateUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    delete:
      tags:
      - User
      summary: Delete user User
      description: 現在のセッションに紐づくユーザーを削除します。
      operationId: User#Delete user
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "204":
          description: No Content response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserDeleteUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/users/{user_id}:
    get:
      tags:
      - User
      summary: Get user User
      description: 指定したIDのユーザーの情報を返します。
      operationId: User#Get user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: user_id
        in: path
        description: User id of firebase
        required: true
        type: string
        maxLength: 28
        minLength: 28
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserGetUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserGetUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/users/me:
    get:
      tags:
      - User
      summary: Get current user User
      description: 現在のセッションに紐付くユーザの情報を返します。
      operationId: User#Get current user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserGetCurrentUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserGetCurrentUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
definitions:
  ActivityManualPostOfActivityRequestBody:
    title: ActivityManualPostOfActivityRequestBody
    type: object
    properties:
      Activity:
        $ref: '#/definitions/ActivityRequestBody'
    example:
      Activity:
        category: 0
        content:
          comment: ロジスティック回帰が使われている理由がよくわかった
          subject: PRML本の4章を読んだ。
          url: https://www.amazon.co.jp/パターン認識と機械学習-上-C-M-ビショップ/dp/4621061224
        favorites:
        - 4sra3r4zibfrzp4i
        - akkynv4v3v8d5evx
        gifts: []
        id: 0000abcds6z57pqbpkin
        rank: 0
        tags:
        - Golang
        - GCP
        userTiny:
          name: トノウチ
          photoUrl: https://storage.tenki.jp/storage/static-images/suppl/article/image/9/97/971/9711/1/large.jpg
          uid: p2qfpb2gvxrzedu2
  ActivityManualPostOfActivityUnauthorizedResponseBody:
    title: ActivityManualPostOfActivityUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Culpa vel deleniti ut sed.
  ActivityPickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody:
    title: ActivityPickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Nulla porro mollitia quo perspiciatis.
  ActivityRefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody:
    title: ActivityRefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Pariatur aut aut molestiae id itaque voluptatem.
  ActivityRefreshQiitaActivitiesUnauthorizedResponseBody:
    title: ActivityRefreshQiitaActivitiesUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Veniam et.
  ActivityRequestBody:
    title: ActivityRequestBody
    type: object
    properties:
      category:
        type: integer
        description: '投稿のカテゴリー（0: 学習, 1: 開発, 2: 執筆, 3: 賞等）'
        example: 0
        format: int64
      content:
        $ref: '#/definitions/ContentRequestBody'
      favorites:
        type: array
        items:
          type: string
          example: Cum modi.
        description: 投稿に対して'いいね'したユーザのUID
        example:
        - 4sra3r4zibfrzp4i
        - akkynv4v3v8d5evx
      gifts:
        type: array
        items:
          type: string
          example: Vero nemo consequuntur est.
        description: 投稿に対して'Gifting'したユーザのUID
        example: []
      id:
        type: string
        description: 投稿のID（Firestore上ではドキュメントIDになる）
        example: 0000abcds6z57pqbpkin
      rank:
        type: integer
        description: 投稿のランク（0~3 -> C~S に対応してレベルを設定）
        example: 0
        format: int64
      tags:
        type: array
        items:
          type: string
          example: Cum dolorum qui non nobis corrupti.
        description: 投稿に紐づく技術タグを設定する
        example:
        - Golang
        - GCP
      userTiny:
        $ref: '#/definitions/UserTinyRequestBody'
    example:
      category: 0
      content:
        comment: ロジスティック回帰が使われている理由がよくわかった
        subject: PRML本の4章を読んだ。
        url: https://www.amazon.co.jp/パターン認識と機械学習-上-C-M-ビショップ/dp/4621061224
      favorites:
      - 4sra3r4zibfrzp4i
      - akkynv4v3v8d5evx
      gifts: []
      id: 0000abcds6z57pqbpkin
      rank: 0
      tags:
      - Golang
      - GCP
      userTiny:
        name: トノウチ
        photoUrl: https://storage.tenki.jp/storage/static-images/suppl/article/image/9/97/971/9711/1/large.jpg
        uid: p2qfpb2gvxrzedu2
    required:
    - id
    - userTiny
    - category
    - rank
    - content
    - tags
    - favorites
    - gifts
  AdminAdminCreateNewUserRequestBody:
    title: AdminAdminCreateNewUserRequestBody
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_name: keisuke.honda
    required:
    - user_name
    - email_address
    - phone_number
    - photo_url
  AdminAdminCreateNewUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Admin Create New UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  AdminAdminCreateNewUserUnauthorizedResponseBody:
    title: AdminAdminCreateNewUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Est et expedita id beatae.
  AdminAdminDeleteUserUnauthorizedResponseBody:
    title: AdminAdminDeleteUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Et voluptas voluptas assumenda ut est aliquam.
  AdminAdminGetUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: false
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Admin Get UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  AdminAdminGetUserUnauthorizedResponseBody:
    title: AdminAdminGetUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Error quod.
  AdminAdminHealthCheckResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.healthcheck+json; view=default'
    type: object
    properties:
      result:
        type: string
        default: OK
        example: OK
    description: Admin Health-CheckResponseBody result type (default view)
    example:
      result: OK
    required:
    - result
  AdminAdminHealthCheckUnauthorizedResponseBody:
    title: AdminAdminHealthCheckUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Laboriosam est placeat asperiores.
  AdminAdminListUserUnauthorizedResponseBody:
    title: AdminAdminListUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Molestiae quo enim consectetur a.
  AdminAdminSigninRequestBody:
    title: AdminAdminSigninRequestBody
    type: object
    properties:
      password:
        type: string
        example: b09jw04i1024
      uid:
        type: string
        example: 4WIbqiNIpIYXqrfBMVZsbKCepau1
    example:
      password: b09jw04i1024
      uid: 4WIbqiNIpIYXqrfBMVZsbKCepau1
    required:
    - uid
    - password
  AdminAdminSigninResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.admin.signin+json; view=default'
    type: object
    properties:
      token:
        type: string
        description: JWT used for authentication
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    description: Admin SigninResponseBody result type (default view)
    example:
      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    required:
    - token
  AdminAdminSigninUnauthorizedResponseBody:
    title: AdminAdminSigninUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Accusantium ut.
  AdminAdminUpdateUserRequestBody:
    title: AdminAdminUpdateUserRequestBody
    type: object
    properties:
      disabled:
        type: boolean
        description: ユーザが停止状態かどうか（論理削除）
        example: true
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    example:
      disabled: true
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_name: keisuke.honda
  AdminAdminUpdateUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: false
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Admin Update UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  AdminAdminUpdateUserUnauthorizedResponseBody:
    title: AdminAdminUpdateUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Ut libero dignissimos.
  AdminJeeekUserResponseCollection:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; type=collection;
      view=default'
    type: array
    items:
      $ref: '#/definitions/JeeekUserResponse'
    description: Admin List UserResponseBody is the result type for an array of JeeekUserResponse
      (default view)
    example:
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
  ContentRequestBody:
    title: ContentRequestBody
    type: object
    properties:
      comment:
        type: string
        description: 投稿についての自由記述欄
        example: ロジスティック回帰が使われている理由がよくわかった
      subject:
        type: string
        description: 投稿の主題
        example: PRML本の4章を読んだ。
      url:
        type: string
        description: 投稿に関連するUrl（オプション）
        example: https://www.amazon.co.jp/パターン認識と機械学習-上-C-M-ビショップ/dp/4621061224
    example:
      comment: ロジスティック回帰が使われている理由がよくわかった
      subject: PRML本の4章を読んだ。
      url: https://www.amazon.co.jp/パターン認識と機械学習-上-C-M-ビショップ/dp/4621061224
    required:
    - subject
  JeeekUserResponse:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: user response (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  UserDeleteUserUnauthorizedResponseBody:
    title: UserDeleteUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Eum necessitatibus harum explicabo ipsam mollitia.
  UserGetCurrentUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Get Current UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  UserGetCurrentUserUnauthorizedResponseBody:
    title: UserGetCurrentUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Provident quo ut iusto quis.
  UserGetUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Get UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  UserGetUserUnauthorizedResponseBody:
    title: UserGetUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Nobis et facilis.
  UserJeeekUserResponseCollection:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; type=collection;
      view=default'
    type: array
    items:
      $ref: '#/definitions/JeeekUserResponse'
    description: List UserResponseBody is the result type for an array of JeeekUserResponse
      (default view)
    example:
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
  UserListUserUnauthorizedResponseBody:
    title: UserListUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Itaque suscipit minus corrupti et natus praesentium.
  UserTinyRequestBody:
    title: UserTinyRequestBody
    type: object
    properties:
      name:
        type: string
        description: 投稿したユーザの名前
        example: トノウチ
      photoUrl:
        type: string
        description: 投稿したユーザの写真Url
        example: https://storage.tenki.jp/storage/static-images/suppl/article/image/9/97/971/9711/1/large.jpg
      uid:
        type: string
        description: 投稿したユーザのUID
        example: p2qfpb2gvxrzedu2
    example:
      name: トノウチ
      photoUrl: https://storage.tenki.jp/storage/static-images/suppl/article/image/9/97/971/9711/1/large.jpg
      uid: p2qfpb2gvxrzedu2
    required:
    - uid
    - name
  UserUpdateUserRequestBody:
    title: UserUpdateUserRequestBody
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_name: keisuke.honda
  UserUpdateUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Update UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  UserUpdateUserUnauthorizedResponseBody:
    title: UserUpdateUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Exercitationem veritatis iure.
securityDefinitions:
  jwt_header_Authorization:
    type: apiKey
    description: Secures endpoint by requiring a valid JWT token retrieved via the
      firebase.
    name: Authorization
    in: header
externalDocs:
  description: Docs
  url: https://github.com/tonouchi510/Jeeek/wiki
