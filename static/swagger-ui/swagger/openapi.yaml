swagger: "2.0"
info:
  title: JeeekAPI
  description: エンジニアのための自己実現SNSアプリ
  contact:
    name: tonouchi510
    email: tonouchi27@gmail.com
    url: https://github.com/tonouchi510/Jeeek/issues
  version: "0.1"
host: localhost:8080
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /v1/activity/post:
    post:
      tags:
      - Activity
      summary: Manual activity post Activity
      description: 手動投稿用のAPI
      operationId: Activity#Manual activity post
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Manual Activity PostRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/ActivityManualActivityPostRequestBody'
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ActivityManualActivityPostUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/activity/writer:
    post:
      tags:
      - Activity
      summary: Reflection activity Activity
      description: タイムラインへの書き込みを行う
      operationId: Activity#Reflection activity
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Reflection ActivityRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/ActivityReflectionActivityRequestBody'
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ActivityReflectionActivityUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/admin/healthcheck:
    get:
      tags:
      - Admin
      summary: admin health-check Admin
      description: admin apiのhealth-check
      operationId: Admin#admin health-check
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminAdminHealthCheckResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminHealthCheckUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/admin/signin:
    post:
      tags:
      - Admin
      summary: admin signin Admin
      description: admin権限のトークンを取得します．
      operationId: Admin#admin signin
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Admin SigninRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AdminAdminSigninRequestBody'
          required:
          - uid
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminAdminSigninResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminSigninUnauthorizedResponseBody'
      schemes:
      - http
  /v1/admin/users:
    get:
      tags:
      - Admin
      summary: admin list user Admin
      description: ユーザーの一覧を返します。
      operationId: Admin#admin list user
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminJeeekUserResponseCollection'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminListUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    post:
      tags:
      - Admin
      summary: admin create new user Admin
      description: 新しいユーザーを登録します。
      operationId: Admin#admin create new user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Admin Create New UserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AdminAdminCreateNewUserRequestBody'
          required:
          - user_name
          - email_address
          - phone_number
          - photo_url
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/AdminAdminCreateNewUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminCreateNewUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/admin/users/{user_id}:
    get:
      tags:
      - Admin
      summary: admin get user Admin
      description: 指定したIDのユーザーの情報を返します。
      operationId: Admin#admin get user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: user_id
        in: path
        description: User id of firebase
        required: true
        type: string
        maxLength: 28
        minLength: 28
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminAdminGetUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminGetUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - Admin
      summary: admin update user Admin
      description: 指定したユーザー情報を更新します。
      operationId: Admin#admin update user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: user_id
        in: path
        description: User id of firebase
        required: true
        type: string
        maxLength: 28
        minLength: 28
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Admin Update UserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AdminAdminUpdateUserRequestBody'
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AdminAdminUpdateUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminUpdateUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    delete:
      tags:
      - Admin
      summary: admin delete user Admin
      description: 指定したユーザーを削除します。
      operationId: Admin#admin delete user
      parameters:
      - name: user_id
        in: path
        description: User id of firebase
        required: true
        type: string
        maxLength: 28
        minLength: 28
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "204":
          description: No Content response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/AdminAdminDeleteUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/external_activity/batch:
    get:
      tags:
      - ExternalActivity
      summary: Refresh activities of external services ExternalActivity
      description: セッションに紐づくユーザの連携済みサービスのアクティビティを取得する
      operationId: ExternalActivity#Refresh activities of external services
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ExternalActivityRefreshActivitiesOfExternalServicesUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/external_activity/qiita:
    get:
      tags:
      - ExternalActivity
      summary: Refresh qiita activity ExternalActivity
      description: セッションに紐づくユーザのQiitaの記事投稿を取得する
      operationId: ExternalActivity#Refresh qiita activity
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ExternalActivityRefreshQiitaActivityUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/external_activity/qiita/initialization:
    get:
      tags:
      - ExternalActivity
      summary: Pick out past activity of qiita ExternalActivity
      description: サービス連携時に連携以前のqiita記事投稿を全て反映させる
      operationId: ExternalActivity#Pick out past activity of qiita
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/ExternalActivityPickOutPastActivityOfQiitaUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/users:
    get:
      tags:
      - User
      summary: List user User
      description: ユーザーの一覧を返します。
      operationId: User#List user
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserJeeekUserResponseCollection'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserListUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - User
      summary: Update user User
      description: 現在のセッションに紐付くユーザー情報を更新します。
      operationId: User#Update user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      - name: Update UserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserUpdateUserRequestBody'
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserUpdateUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserUpdateUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    delete:
      tags:
      - User
      summary: Delete user User
      description: 現在のセッションに紐づくユーザーを削除します。
      operationId: User#Delete user
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "204":
          description: No Content response.
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserDeleteUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/users/{user_id}:
    get:
      tags:
      - User
      summary: Get user User
      description: 指定したIDのユーザーの情報を返します。
      operationId: User#Get user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: user_id
        in: path
        description: User id of firebase
        required: true
        type: string
        maxLength: 28
        minLength: 28
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserGetUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserGetUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /v1/users/me:
    get:
      tags:
      - User
      summary: Get current user User
      description: 現在のセッションに紐付くユーザの情報を返します。
      operationId: User#Get current user
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserGetCurrentUserResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/UserGetCurrentUserUnauthorizedResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
definitions:
  ActivityManualActivityPostRequestBody:
    title: ActivityManualActivityPostRequestBody
    type: object
    properties:
      Activity:
        $ref: '#/definitions/ActivityRequestBody'
    example:
      Activity:
        category: 4567098980272631697
        content:
          comment: Molestiae vel tempora assumenda.
          subject: Quidem dignissimos optio pariatur excepturi aut est.
          url: Mollitia alias.
        favorites:
        - Animi veniam error dolores.
        - Ut nihil.
        - Dolor aliquam sit nulla occaecati eveniet.
        gifts:
        - Possimus ut.
        - Qui omnis ex.
        - Assumenda ad eveniet aut.
        id: Iure quis distinctio.
        rank: 4809644789212274365
        tags:
        - Sit ullam temporibus consequatur consequuntur rerum culpa.
        - Assumenda eum voluptate molestiae quam.
        userTiny:
          name: Cum qui deleniti quae dolorum dignissimos numquam.
          photoUrl: Asperiores quod enim voluptate.
          uid: Repudiandae et numquam voluptatem eos quod.
  ActivityManualActivityPostUnauthorizedResponseBody:
    title: ActivityManualActivityPostUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Accusantium atque consequatur animi dicta dicta.
  ActivityReflectionActivityRequestBody:
    title: ActivityReflectionActivityRequestBody
    type: object
    properties:
      Attributes:
        type: array
        items:
          $ref: '#/definitions/ActivityWriterAttributesRequestBody'
        example:
        - uid: Quas et quo corporis ea.
        - uid: Quas et quo corporis ea.
        - uid: Quas et quo corporis ea.
      Data:
        type: string
        example:
        - 85
        - 116
        - 32
        - 101
        - 116
        - 32
        - 116
        - 101
        - 110
        - 101
        - 116
        - 117
        - 114
        - 32
        - 100
        - 111
        - 108
        - 111
        - 114
        - 101
        - 115
        - 32
        - 97
        - 46
        format: byte
    example:
      Attributes:
      - uid: Quas et quo corporis ea.
      - uid: Quas et quo corporis ea.
      - uid: Quas et quo corporis ea.
      Data:
      - 65
      - 99
      - 99
      - 117
      - 115
      - 97
      - 110
      - 116
      - 105
      - 117
      - 109
      - 32
      - 100
      - 101
      - 115
      - 101
      - 114
      - 117
      - 110
      - 116
      - 46
  ActivityReflectionActivityUnauthorizedResponseBody:
    title: ActivityReflectionActivityUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Quis non laudantium.
  ActivityRequestBody:
    title: ActivityRequestBody
    type: object
    properties:
      category:
        type: integer
        example: 25963335089238085
        format: int64
      content:
        $ref: '#/definitions/ContentRequestBody'
      favorites:
        type: array
        items:
          type: string
          example: Ut sequi quis nihil.
        example:
        - In asperiores nihil eius.
        - Ipsa repudiandae et itaque id magnam facilis.
        - Ut ad consequatur non ullam et officia.
        - Quibusdam magnam voluptate eaque est molestiae.
      gifts:
        type: array
        items:
          type: string
          example: Magni consequuntur libero quasi.
        example:
        - Impedit velit voluptas eum.
        - Itaque autem.
      id:
        type: string
        example: Cupiditate eaque velit.
      rank:
        type: integer
        example: 1969624695858469448
        format: int64
      tags:
        type: array
        items:
          type: string
          example: Distinctio consequatur voluptatem esse et blanditiis.
        example:
        - Et reiciendis qui suscipit molestiae aspernatur.
        - Dolor soluta dolore sunt molestiae officiis.
      userTiny:
        $ref: '#/definitions/UserTinyRequestBody'
    example:
      category: 1372327705432144563
      content:
        comment: Molestiae vel tempora assumenda.
        subject: Quidem dignissimos optio pariatur excepturi aut est.
        url: Mollitia alias.
      favorites:
      - Eligendi sit ea reprehenderit ex temporibus qui.
      - Ab consequatur.
      - Earum iure.
      - Aut perferendis.
      gifts:
      - Architecto iure modi et qui amet et.
      - Occaecati animi et quo nostrum ex.
      - Sint aut blanditiis.
      id: Laborum in consectetur quia et est.
      rank: 7555647446790646784
      tags:
      - Et repellat dolor quia dolor magni.
      - Eum facere.
      - Voluptas et dolorum qui velit consequatur et.
      - Consectetur fuga dicta nemo tempora nam non.
      userTiny:
        name: Cum qui deleniti quae dolorum dignissimos numquam.
        photoUrl: Asperiores quod enim voluptate.
        uid: Repudiandae et numquam voluptatem eos quod.
    required:
    - id
    - userTiny
    - category
    - rank
    - content
    - tags
    - favorites
    - gifts
  ActivityWriterAttributesRequestBody:
    title: ActivityWriterAttributesRequestBody
    type: object
    properties:
      uid:
        type: string
        example: Animi rem odio.
    example:
      uid: Voluptatem ratione eum.
  AdminAdminCreateNewUserRequestBody:
    title: AdminAdminCreateNewUserRequestBody
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_name: keisuke.honda
    required:
    - user_name
    - email_address
    - phone_number
    - photo_url
  AdminAdminCreateNewUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: false
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Admin Create New UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  AdminAdminCreateNewUserUnauthorizedResponseBody:
    title: AdminAdminCreateNewUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Voluptatum voluptatum accusamus dolor.
  AdminAdminDeleteUserUnauthorizedResponseBody:
    title: AdminAdminDeleteUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Eligendi consequuntur voluptatem aperiam vitae quae.
  AdminAdminGetUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: false
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Admin Get UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  AdminAdminGetUserUnauthorizedResponseBody:
    title: AdminAdminGetUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Velit est incidunt explicabo voluptatem maxime.
  AdminAdminHealthCheckResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.healthcheck+json; view=default'
    type: object
    properties:
      result:
        type: string
        default: OK
        example: OK
    description: Admin Health-CheckResponseBody result type (default view)
    example:
      result: OK
    required:
    - result
  AdminAdminHealthCheckUnauthorizedResponseBody:
    title: AdminAdminHealthCheckUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: In eligendi a.
  AdminAdminListUserUnauthorizedResponseBody:
    title: AdminAdminListUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Blanditiis veniam exercitationem officia voluptatum rerum enim.
  AdminAdminSigninRequestBody:
    title: AdminAdminSigninRequestBody
    type: object
    properties:
      uid:
        type: string
        example: 4WIbqiNIpIYXqrfBMVZsbKCepau1
    example:
      uid: 4WIbqiNIpIYXqrfBMVZsbKCepau1
    required:
    - uid
  AdminAdminSigninResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.admin.signin+json; view=default'
    type: object
    properties:
      token:
        type: string
        description: JWT used for authentication
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    description: Admin SigninResponseBody result type (default view)
    example:
      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    required:
    - token
  AdminAdminSigninUnauthorizedResponseBody:
    title: AdminAdminSigninUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Qui saepe itaque sit dolor explicabo autem.
  AdminAdminUpdateUserRequestBody:
    title: AdminAdminUpdateUserRequestBody
    type: object
    properties:
      disabled:
        type: boolean
        description: ユーザが停止状態かどうか（論理削除）
        example: false
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    example:
      disabled: true
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_name: keisuke.honda
  AdminAdminUpdateUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Admin Update UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  AdminAdminUpdateUserUnauthorizedResponseBody:
    title: AdminAdminUpdateUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Fugit iusto eius repudiandae ut ut.
  AdminJeeekUserResponseCollection:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; type=collection;
      view=default'
    type: array
    items:
      $ref: '#/definitions/JeeekUserResponse'
    description: Admin List UserResponseBody is the result type for an array of JeeekUserResponse
      (default view)
    example:
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
  ContentRequestBody:
    title: ContentRequestBody
    type: object
    properties:
      comment:
        type: string
        example: Et voluptatem omnis cumque explicabo.
      subject:
        type: string
        example: Sed autem.
      url:
        type: string
        example: Perspiciatis inventore consequatur.
    example:
      comment: Corrupti temporibus tempore sunt voluptatem.
      subject: Provident qui neque tempore nobis consequatur.
      url: At voluptas qui quo aut.
    required:
    - subject
  ExternalActivityPickOutPastActivityOfQiitaUnauthorizedResponseBody:
    title: ExternalActivityPickOutPastActivityOfQiitaUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Quis ut expedita voluptate.
  ExternalActivityRefreshActivitiesOfExternalServicesUnauthorizedResponseBody:
    title: ExternalActivityRefreshActivitiesOfExternalServicesUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Dolorem at illo aut.
  ExternalActivityRefreshQiitaActivityUnauthorizedResponseBody:
    title: ExternalActivityRefreshQiitaActivityUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Eos excepturi dignissimos et maiores repellat.
  JeeekUserResponse:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: user response (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  UserDeleteUserUnauthorizedResponseBody:
    title: UserDeleteUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Sed eum est doloribus et reprehenderit.
  UserGetCurrentUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: true
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Get Current UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  UserGetCurrentUserUnauthorizedResponseBody:
    title: UserGetCurrentUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Dolor et.
  UserGetUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: false
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Get UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  UserGetUserUnauthorizedResponseBody:
    title: UserGetUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Maiores commodi.
  UserJeeekUserResponseCollection:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; type=collection;
      view=default'
    type: array
    items:
      $ref: '#/definitions/JeeekUserResponse'
    description: List UserResponseBody is the result type for an array of JeeekUserResponse
      (default view)
    example:
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    - email_address: keisuke.honda+testuser@ynu.jp
      email_verified: true
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
  UserListUserUnauthorizedResponseBody:
    title: UserListUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Est dolor sint.
  UserTinyRequestBody:
    title: UserTinyRequestBody
    type: object
    properties:
      name:
        type: string
        example: Temporibus labore.
      photoUrl:
        type: string
        example: Rerum magnam quibusdam in quibusdam ut.
      uid:
        type: string
        example: Autem alias.
    example:
      name: Facere laudantium repellendus ex.
      photoUrl: Rerum nobis.
      uid: Est similique non ipsum ut.
    required:
    - uid
    - name
  UserUpdateUserRequestBody:
    title: UserUpdateUserRequestBody
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_name: keisuke.honda
  UserUpdateUserResponseBody:
    title: 'Mediatype identifier: application/vnd.jeeek.user+json; view=default'
    type: object
    properties:
      email_address:
        type: string
        description: ユーザーのプライマリ メールアドレス
        example: keisuke.honda+testuser@ynu.jp
        format: email
      email_verified:
        type: boolean
        description: ユーザーのプライマリ メールアドレスが確認されているかどうか
        example: false
      phone_number:
        type: string
        description: ユーザのメインの電話番号
        example: "08079469367"
        pattern: ^\+?[\d]{10,}$
      photo_url:
        type: string
        description: ユーザーの写真 URL
        example: https://imageurl.com
      user_id:
        type: string
        description: User id of firebase
        example: XRQ85mtXnINISH25zfM0m5RlC6L2
        minLength: 28
        maxLength: 28
      user_name:
        type: string
        description: ユーザーの表示名
        example: keisuke.honda
        minLength: 1
        maxLength: 20
    description: Update UserResponseBody result type (default view)
    example:
      email_address: keisuke.honda+testuser@ynu.jp
      email_verified: false
      phone_number: "08079469367"
      photo_url: https://imageurl.com
      user_id: XRQ85mtXnINISH25zfM0m5RlC6L2
      user_name: keisuke.honda
    required:
    - user_id
    - user_name
    - email_address
    - photo_url
    - phone_number
    - email_verified
  UserUpdateUserUnauthorizedResponseBody:
    title: UserUpdateUserUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Assumenda sed.
securityDefinitions:
  jwt_header_Authorization:
    type: apiKey
    description: Secures endpoint by requiring a valid JWT token retrieved via the
      firebase.
    name: Authorization
    in: header
externalDocs:
  description: Docs
  url: https://github.com/tonouchi510/Jeeek/wiki
