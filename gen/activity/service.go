// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity service
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package activity

import (
	"context"

	"goa.design/goa/v3/security"
)

// アクティビティの自動取得API
type Service interface {
	// 指定したユーザのQiitaの記事投稿を取得する
	FetchQiitaArticle(context.Context, *SessionTokenPayload) (err error)
	// サービス連携以前のqiita記事投稿を反映させる
	PickOutPastActivityOfQiita(context.Context, *SessionTokenPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Activity"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"Fetch qiita article", "Pick out past activity of qiita"}

// SessionTokenPayload is the payload type of the Activity service Fetch qiita
// article method.
type SessionTokenPayload struct {
	// JWT used for authentication
	Token *string
}

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}
