// Code generated by goa v3.0.4, DO NOT EDIT.
//
// Admin client
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package admin

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Admin" service client.
type Client struct {
	AdminHealthCheckEndpoint   goa.Endpoint
	AdminSigninEndpoint        goa.Endpoint
	AdminCreateNewUserEndpoint goa.Endpoint
	AdminUpdateUserEndpoint    goa.Endpoint
	AdminListUserEndpoint      goa.Endpoint
	AdminGetUserEndpoint       goa.Endpoint
	AdminDeleteUserEndpoint    goa.Endpoint
}

// NewClient initializes a "Admin" service client given the endpoints.
func NewClient(adminHealthCheck, adminSignin, adminCreateNewUser, adminUpdateUser, adminListUser, adminGetUser, adminDeleteUser goa.Endpoint) *Client {
	return &Client{
		AdminHealthCheckEndpoint:   adminHealthCheck,
		AdminSigninEndpoint:        adminSignin,
		AdminCreateNewUserEndpoint: adminCreateNewUser,
		AdminUpdateUserEndpoint:    adminUpdateUser,
		AdminListUserEndpoint:      adminListUser,
		AdminGetUserEndpoint:       adminGetUser,
		AdminDeleteUserEndpoint:    adminDeleteUser,
	}
}

// AdminHealthCheck calls the "admin health-check" endpoint of the "Admin"
// service.
func (c *Client) AdminHealthCheck(ctx context.Context, p *SessionTokenPayload) (res *JeeekHealthcheck, err error) {
	var ires interface{}
	ires, err = c.AdminHealthCheckEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*JeeekHealthcheck), nil
}

// AdminSignin calls the "admin signin" endpoint of the "Admin" service.
func (c *Client) AdminSignin(ctx context.Context, p *AdminSignInPayload) (res *JeeekAdminSignin, err error) {
	var ires interface{}
	ires, err = c.AdminSigninEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*JeeekAdminSignin), nil
}

// AdminCreateNewUser calls the "admin create new user" endpoint of the "Admin"
// service.
func (c *Client) AdminCreateNewUser(ctx context.Context, p *AdminCreateUserPayload) (res *JeeekUser, err error) {
	var ires interface{}
	ires, err = c.AdminCreateNewUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*JeeekUser), nil
}

// AdminUpdateUser calls the "admin update user" endpoint of the "Admin"
// service.
func (c *Client) AdminUpdateUser(ctx context.Context, p *AdminUpdateUserPayload) (res *JeeekUser, err error) {
	var ires interface{}
	ires, err = c.AdminUpdateUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*JeeekUser), nil
}

// AdminListUser calls the "admin list user" endpoint of the "Admin" service.
func (c *Client) AdminListUser(ctx context.Context, p *SessionTokenPayload) (res JeeekUserCollection, err error) {
	var ires interface{}
	ires, err = c.AdminListUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(JeeekUserCollection), nil
}

// AdminGetUser calls the "admin get user" endpoint of the "Admin" service.
func (c *Client) AdminGetUser(ctx context.Context, p *GetUserPayload) (res *JeeekUser, err error) {
	var ires interface{}
	ires, err = c.AdminGetUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*JeeekUser), nil
}

// AdminDeleteUser calls the "admin delete user" endpoint of the "Admin"
// service.
func (c *Client) AdminDeleteUser(ctx context.Context, p *AdminDeleteUserPayload) (err error) {
	_, err = c.AdminDeleteUserEndpoint(ctx, p)
	return
}
