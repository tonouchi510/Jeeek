// Code generated by goa v3.0.4, DO NOT EDIT.
//
// Admin service
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package admin

import (
	"context"

	adminviews "github.com/tonouchi510/Jeeek/gen/admin/views"
	"goa.design/goa/v3/security"
)

// 管理者用のAPI。
type Service interface {
	// admin apiのhealth-check
	AdminHealthCheck(context.Context, *SessionTokenPayload) (res *JeeekHealthcheck, err error)
	// admin権限のトークンを取得します．
	AdminSignin(context.Context, *AdminSignInPayload) (res *JeeekAdminSignin, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Admin"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"admin health-check", "admin signin"}

// SessionTokenPayload is the payload type of the Admin service admin
// health-check method.
type SessionTokenPayload struct {
	// JWT used for authentication
	Token *string
}

// JeeekHealthcheck is the result type of the Admin service admin health-check
// method.
type JeeekHealthcheck struct {
	Result string
}

// AdminSignInPayload is the payload type of the Admin service admin signin
// method.
type AdminSignInPayload struct {
	UID string
}

// JeeekAdminSignin is the result type of the Admin service admin signin method.
type JeeekAdminSignin struct {
	// JWT used for authentication
	Token string
}

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}

// NewJeeekHealthcheck initializes result type JeeekHealthcheck from viewed
// result type JeeekHealthcheck.
func NewJeeekHealthcheck(vres *adminviews.JeeekHealthcheck) *JeeekHealthcheck {
	var res *JeeekHealthcheck
	switch vres.View {
	case "default", "":
		res = newJeeekHealthcheck(vres.Projected)
	}
	return res
}

// NewViewedJeeekHealthcheck initializes viewed result type JeeekHealthcheck
// from result type JeeekHealthcheck using the given view.
func NewViewedJeeekHealthcheck(res *JeeekHealthcheck, view string) *adminviews.JeeekHealthcheck {
	var vres *adminviews.JeeekHealthcheck
	switch view {
	case "default", "":
		p := newJeeekHealthcheckView(res)
		vres = &adminviews.JeeekHealthcheck{p, "default"}
	}
	return vres
}

// NewJeeekAdminSignin initializes result type JeeekAdminSignin from viewed
// result type JeeekAdminSignin.
func NewJeeekAdminSignin(vres *adminviews.JeeekAdminSignin) *JeeekAdminSignin {
	var res *JeeekAdminSignin
	switch vres.View {
	case "default", "":
		res = newJeeekAdminSignin(vres.Projected)
	}
	return res
}

// NewViewedJeeekAdminSignin initializes viewed result type JeeekAdminSignin
// from result type JeeekAdminSignin using the given view.
func NewViewedJeeekAdminSignin(res *JeeekAdminSignin, view string) *adminviews.JeeekAdminSignin {
	var vres *adminviews.JeeekAdminSignin
	switch view {
	case "default", "":
		p := newJeeekAdminSigninView(res)
		vres = &adminviews.JeeekAdminSignin{p, "default"}
	}
	return vres
}

// newJeeekHealthcheck converts projected type JeeekHealthcheck to service type
// JeeekHealthcheck.
func newJeeekHealthcheck(vres *adminviews.JeeekHealthcheckView) *JeeekHealthcheck {
	res := &JeeekHealthcheck{}
	if vres.Result != nil {
		res.Result = *vres.Result
	}
	if vres.Result == nil {
		res.Result = "OK"
	}
	return res
}

// newJeeekHealthcheckView projects result type JeeekHealthcheck to projected
// type JeeekHealthcheckView using the "default" view.
func newJeeekHealthcheckView(res *JeeekHealthcheck) *adminviews.JeeekHealthcheckView {
	vres := &adminviews.JeeekHealthcheckView{
		Result: &res.Result,
	}
	return vres
}

// newJeeekAdminSignin converts projected type JeeekAdminSignin to service type
// JeeekAdminSignin.
func newJeeekAdminSignin(vres *adminviews.JeeekAdminSigninView) *JeeekAdminSignin {
	res := &JeeekAdminSignin{}
	if vres.Token != nil {
		res.Token = *vres.Token
	}
	return res
}

// newJeeekAdminSigninView projects result type JeeekAdminSignin to projected
// type JeeekAdminSigninView using the "default" view.
func newJeeekAdminSigninView(res *JeeekAdminSignin) *adminviews.JeeekAdminSigninView {
	vres := &adminviews.JeeekAdminSigninView{
		Token: &res.Token,
	}
	return vres
}
