// Code generated by goa v3.0.4, DO NOT EDIT.
//
// User HTTP client types
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"unicode/utf8"

	user "github.com/tonouchi510/Jeeek/gen/user"
	userviews "github.com/tonouchi510/Jeeek/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// UpdateUserRequestBody is the type of the "User" service "Update user"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
}

// GetCurrentUserResponseBody is the type of the "User" service "Get current
// user" endpoint HTTP response body.
type GetCurrentUserResponseBody struct {
	// User id of firebase
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
}

// UpdateUserResponseBody is the type of the "User" service "Update user"
// endpoint HTTP response body.
type UpdateUserResponseBody struct {
	// User id of firebase
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
}

// ListUserResponseBody is the type of the "User" service "List user" endpoint
// HTTP response body.
type ListUserResponseBody []*JeeekUserResponse

// GetUserResponseBody is the type of the "User" service "Get user" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// User id of firebase
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
}

// GetCurrentUserUnauthorizedResponseBody is the type of the "User" service
// "Get current user" endpoint HTTP response body for the "unauthorized" error.
type GetCurrentUserUnauthorizedResponseBody string

// UpdateUserUnauthorizedResponseBody is the type of the "User" service "Update
// user" endpoint HTTP response body for the "unauthorized" error.
type UpdateUserUnauthorizedResponseBody string

// ListUserUnauthorizedResponseBody is the type of the "User" service "List
// user" endpoint HTTP response body for the "unauthorized" error.
type ListUserUnauthorizedResponseBody string

// GetUserUnauthorizedResponseBody is the type of the "User" service "Get user"
// endpoint HTTP response body for the "unauthorized" error.
type GetUserUnauthorizedResponseBody string

// DeleteUserUnauthorizedResponseBody is the type of the "User" service "Delete
// user" endpoint HTTP response body for the "unauthorized" error.
type DeleteUserUnauthorizedResponseBody string

// JeeekUserResponse is used to define fields on response body types.
type JeeekUserResponse struct {
	// User id of firebase
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
}

// NewUpdateUserRequestBody builds the HTTP request body from the payload of
// the "Update user" endpoint of the "User" service.
func NewUpdateUserRequestBody(p *user.UpdateUserPayload) *UpdateUserRequestBody {
	body := &UpdateUserRequestBody{
		UserName:     p.UserName,
		EmailAddress: p.EmailAddress,
		PhoneNumber:  p.PhoneNumber,
		PhotoURL:     p.PhotoURL,
	}
	return body
}

// NewGetCurrentUserJeeekUserOK builds a "User" service "Get current user"
// endpoint result from a HTTP "OK" response.
func NewGetCurrentUserJeeekUserOK(body *GetCurrentUserResponseBody) *userviews.JeeekUserView {
	v := &userviews.JeeekUserView{
		UserID:        body.UserID,
		UserName:      body.UserName,
		EmailAddress:  body.EmailAddress,
		PhoneNumber:   body.PhoneNumber,
		PhotoURL:      body.PhotoURL,
		EmailVerified: body.EmailVerified,
	}
	return v
}

// NewGetCurrentUserUnauthorized builds a User service Get current user
// endpoint unauthorized error.
func NewGetCurrentUserUnauthorized(body GetCurrentUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// NewUpdateUserJeeekUserOK builds a "User" service "Update user" endpoint
// result from a HTTP "OK" response.
func NewUpdateUserJeeekUserOK(body *UpdateUserResponseBody) *userviews.JeeekUserView {
	v := &userviews.JeeekUserView{
		UserID:        body.UserID,
		UserName:      body.UserName,
		EmailAddress:  body.EmailAddress,
		PhoneNumber:   body.PhoneNumber,
		PhotoURL:      body.PhotoURL,
		EmailVerified: body.EmailVerified,
	}
	return v
}

// NewUpdateUserUnauthorized builds a User service Update user endpoint
// unauthorized error.
func NewUpdateUserUnauthorized(body UpdateUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// NewListUserJeeekUserCollectionOK builds a "User" service "List user"
// endpoint result from a HTTP "OK" response.
func NewListUserJeeekUserCollectionOK(body ListUserResponseBody) userviews.JeeekUserCollectionView {
	v := make([]*userviews.JeeekUserView, len(body))
	for i, val := range body {
		v[i] = &userviews.JeeekUserView{
			UserID:        val.UserID,
			UserName:      val.UserName,
			EmailAddress:  val.EmailAddress,
			PhoneNumber:   val.PhoneNumber,
			PhotoURL:      val.PhotoURL,
			EmailVerified: val.EmailVerified,
		}
	}
	return v
}

// NewListUserUnauthorized builds a User service List user endpoint
// unauthorized error.
func NewListUserUnauthorized(body ListUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// NewGetUserJeeekUserOK builds a "User" service "Get user" endpoint result
// from a HTTP "OK" response.
func NewGetUserJeeekUserOK(body *GetUserResponseBody) *userviews.JeeekUserView {
	v := &userviews.JeeekUserView{
		UserID:        body.UserID,
		UserName:      body.UserName,
		EmailAddress:  body.EmailAddress,
		PhoneNumber:   body.PhoneNumber,
		PhotoURL:      body.PhotoURL,
		EmailVerified: body.EmailVerified,
	}
	return v
}

// NewGetUserUnauthorized builds a User service Get user endpoint unauthorized
// error.
func NewGetUserUnauthorized(body GetUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// NewDeleteUserUnauthorized builds a User service Delete user endpoint
// unauthorized error.
func NewDeleteUserUnauthorized(body DeleteUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// ValidateJeeekUserResponse runs the validations defined on JeeekUserResponse
func ValidateJeeekUserResponse(body *JeeekUserResponse) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_name", "body"))
	}
	if body.EmailAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_address", "body"))
	}
	if body.PhotoURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("photo_url", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone_number", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.UserID != nil {
		if utf8.RuneCountInString(*body.UserID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", *body.UserID, utf8.RuneCountInString(*body.UserID), 28, true))
		}
	}
	if body.UserID != nil {
		if utf8.RuneCountInString(*body.UserID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", *body.UserID, utf8.RuneCountInString(*body.UserID), 28, false))
		}
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 1, true))
		}
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 20, false))
		}
	}
	if body.EmailAddress != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email_address", *body.EmailAddress, goa.FormatEmail))
	}
	if body.PhoneNumber != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.phone_number", *body.PhoneNumber, "^\\+?[\\d]{10,}$"))
	}
	return
}
