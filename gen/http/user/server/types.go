// Code generated by goa v3.0.7, DO NOT EDIT.
//
// User HTTP server types
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package server

import (
	"unicode/utf8"

	user "github.com/tonouchi510/Jeeek/gen/user"
	userviews "github.com/tonouchi510/Jeeek/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// UpdateUserRequestBody is the type of the "User" service "Update user"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
}

// GetCurrentUserResponseBody is the type of the "User" service "Get current
// user" endpoint HTTP response body.
type GetCurrentUserResponseBody struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
}

// GetCurrentUserResponseBodyTiny is the type of the "User" service "Get
// current user" endpoint HTTP response body.
type GetCurrentUserResponseBodyTiny struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
}

// GetCurrentUserResponseBodyAdmin is the type of the "User" service "Get
// current user" endpoint HTTP response body.
type GetCurrentUserResponseBodyAdmin struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	// ユーザが作成された日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 最後にログインした日時
	LastSignedinAt *string `form:"last_signedin_at,omitempty" json:"last_signedin_at,omitempty" xml:"last_signedin_at,omitempty"`
}

// UpdateUserResponseBody is the type of the "User" service "Update user"
// endpoint HTTP response body.
type UpdateUserResponseBody struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
}

// UpdateUserResponseBodyTiny is the type of the "User" service "Update user"
// endpoint HTTP response body.
type UpdateUserResponseBodyTiny struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
}

// UpdateUserResponseBodyAdmin is the type of the "User" service "Update user"
// endpoint HTTP response body.
type UpdateUserResponseBodyAdmin struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	// ユーザが作成された日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 最後にログインした日時
	LastSignedinAt *string `form:"last_signedin_at,omitempty" json:"last_signedin_at,omitempty" xml:"last_signedin_at,omitempty"`
}

// JeeekUserResponseCollection is the type of the "User" service "List user"
// endpoint HTTP response body.
type JeeekUserResponseCollection []*JeeekUserResponse

// JeeekUserResponseTinyCollection is the type of the "User" service "List
// user" endpoint HTTP response body.
type JeeekUserResponseTinyCollection []*JeeekUserResponseTiny

// JeeekUserResponseAdminCollection is the type of the "User" service "List
// user" endpoint HTTP response body.
type JeeekUserResponseAdminCollection []*JeeekUserResponseAdmin

// GetUserResponseBody is the type of the "User" service "Get user" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
}

// GetUserResponseBodyTiny is the type of the "User" service "Get user"
// endpoint HTTP response body.
type GetUserResponseBodyTiny struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
}

// GetUserResponseBodyAdmin is the type of the "User" service "Get user"
// endpoint HTTP response body.
type GetUserResponseBodyAdmin struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	// ユーザが作成された日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 最後にログインした日時
	LastSignedinAt *string `form:"last_signedin_at,omitempty" json:"last_signedin_at,omitempty" xml:"last_signedin_at,omitempty"`
}

// GetCurrentUserUnauthorizedResponseBody is the type of the "User" service
// "Get current user" endpoint HTTP response body for the "unauthorized" error.
type GetCurrentUserUnauthorizedResponseBody string

// UpdateUserUnauthorizedResponseBody is the type of the "User" service "Update
// user" endpoint HTTP response body for the "unauthorized" error.
type UpdateUserUnauthorizedResponseBody string

// ListUserUnauthorizedResponseBody is the type of the "User" service "List
// user" endpoint HTTP response body for the "unauthorized" error.
type ListUserUnauthorizedResponseBody string

// GetUserUnauthorizedResponseBody is the type of the "User" service "Get user"
// endpoint HTTP response body for the "unauthorized" error.
type GetUserUnauthorizedResponseBody string

// DeleteUserUnauthorizedResponseBody is the type of the "User" service "Delete
// user" endpoint HTTP response body for the "unauthorized" error.
type DeleteUserUnauthorizedResponseBody string

// JeeekUserResponse is used to define fields on response body types.
type JeeekUserResponse struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
}

// JeeekUserResponseTiny is used to define fields on response body types.
type JeeekUserResponseTiny struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
}

// JeeekUserResponseAdmin is used to define fields on response body types.
type JeeekUserResponseAdmin struct {
	// User id of firebase
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ユーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	// ユーザが作成された日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 最後にログインした日時
	LastSignedinAt *string `form:"last_signedin_at,omitempty" json:"last_signedin_at,omitempty" xml:"last_signedin_at,omitempty"`
}

// NewGetCurrentUserResponseBody builds the HTTP response body from the result
// of the "Get current user" endpoint of the "User" service.
func NewGetCurrentUserResponseBody(res *userviews.JeeekUserView) *GetCurrentUserResponseBody {
	body := &GetCurrentUserResponseBody{
		UserID:        *res.UserID,
		UserName:      *res.UserName,
		EmailAddress:  *res.EmailAddress,
		PhoneNumber:   *res.PhoneNumber,
		PhotoURL:      *res.PhotoURL,
		EmailVerified: *res.EmailVerified,
	}
	return body
}

// NewGetCurrentUserResponseBodyTiny builds the HTTP response body from the
// result of the "Get current user" endpoint of the "User" service.
func NewGetCurrentUserResponseBodyTiny(res *userviews.JeeekUserView) *GetCurrentUserResponseBodyTiny {
	body := &GetCurrentUserResponseBodyTiny{
		UserID:       *res.UserID,
		UserName:     *res.UserName,
		EmailAddress: *res.EmailAddress,
	}
	return body
}

// NewGetCurrentUserResponseBodyAdmin builds the HTTP response body from the
// result of the "Get current user" endpoint of the "User" service.
func NewGetCurrentUserResponseBodyAdmin(res *userviews.JeeekUserView) *GetCurrentUserResponseBodyAdmin {
	body := &GetCurrentUserResponseBodyAdmin{
		UserID:         *res.UserID,
		UserName:       *res.UserName,
		EmailAddress:   *res.EmailAddress,
		PhoneNumber:    *res.PhoneNumber,
		PhotoURL:       *res.PhotoURL,
		EmailVerified:  *res.EmailVerified,
		Disabled:       res.Disabled,
		CreatedAt:      res.CreatedAt,
		LastSignedinAt: res.LastSignedinAt,
	}
	return body
}

// NewUpdateUserResponseBody builds the HTTP response body from the result of
// the "Update user" endpoint of the "User" service.
func NewUpdateUserResponseBody(res *userviews.JeeekUserView) *UpdateUserResponseBody {
	body := &UpdateUserResponseBody{
		UserID:        *res.UserID,
		UserName:      *res.UserName,
		EmailAddress:  *res.EmailAddress,
		PhoneNumber:   *res.PhoneNumber,
		PhotoURL:      *res.PhotoURL,
		EmailVerified: *res.EmailVerified,
	}
	return body
}

// NewUpdateUserResponseBodyTiny builds the HTTP response body from the result
// of the "Update user" endpoint of the "User" service.
func NewUpdateUserResponseBodyTiny(res *userviews.JeeekUserView) *UpdateUserResponseBodyTiny {
	body := &UpdateUserResponseBodyTiny{
		UserID:       *res.UserID,
		UserName:     *res.UserName,
		EmailAddress: *res.EmailAddress,
	}
	return body
}

// NewUpdateUserResponseBodyAdmin builds the HTTP response body from the result
// of the "Update user" endpoint of the "User" service.
func NewUpdateUserResponseBodyAdmin(res *userviews.JeeekUserView) *UpdateUserResponseBodyAdmin {
	body := &UpdateUserResponseBodyAdmin{
		UserID:         *res.UserID,
		UserName:       *res.UserName,
		EmailAddress:   *res.EmailAddress,
		PhoneNumber:    *res.PhoneNumber,
		PhotoURL:       *res.PhotoURL,
		EmailVerified:  *res.EmailVerified,
		Disabled:       res.Disabled,
		CreatedAt:      res.CreatedAt,
		LastSignedinAt: res.LastSignedinAt,
	}
	return body
}

// NewJeeekUserResponseCollection builds the HTTP response body from the result
// of the "List user" endpoint of the "User" service.
func NewJeeekUserResponseCollection(res userviews.JeeekUserCollectionView) JeeekUserResponseCollection {
	body := make([]*JeeekUserResponse, len(res))
	for i, val := range res {
		body[i] = &JeeekUserResponse{
			UserID:        *val.UserID,
			UserName:      *val.UserName,
			EmailAddress:  *val.EmailAddress,
			PhoneNumber:   *val.PhoneNumber,
			PhotoURL:      *val.PhotoURL,
			EmailVerified: *val.EmailVerified,
		}
	}
	return body
}

// NewJeeekUserResponseTinyCollection builds the HTTP response body from the
// result of the "List user" endpoint of the "User" service.
func NewJeeekUserResponseTinyCollection(res userviews.JeeekUserCollectionView) JeeekUserResponseTinyCollection {
	body := make([]*JeeekUserResponseTiny, len(res))
	for i, val := range res {
		body[i] = &JeeekUserResponseTiny{
			UserID:       *val.UserID,
			UserName:     *val.UserName,
			EmailAddress: *val.EmailAddress,
		}
	}
	return body
}

// NewJeeekUserResponseAdminCollection builds the HTTP response body from the
// result of the "List user" endpoint of the "User" service.
func NewJeeekUserResponseAdminCollection(res userviews.JeeekUserCollectionView) JeeekUserResponseAdminCollection {
	body := make([]*JeeekUserResponseAdmin, len(res))
	for i, val := range res {
		body[i] = &JeeekUserResponseAdmin{
			UserID:         *val.UserID,
			UserName:       *val.UserName,
			EmailAddress:   *val.EmailAddress,
			PhoneNumber:    *val.PhoneNumber,
			PhotoURL:       *val.PhotoURL,
			EmailVerified:  *val.EmailVerified,
			Disabled:       val.Disabled,
			CreatedAt:      val.CreatedAt,
			LastSignedinAt: val.LastSignedinAt,
		}
	}
	return body
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "Get user" endpoint of the "User" service.
func NewGetUserResponseBody(res *userviews.JeeekUserView) *GetUserResponseBody {
	body := &GetUserResponseBody{
		UserID:        *res.UserID,
		UserName:      *res.UserName,
		EmailAddress:  *res.EmailAddress,
		PhoneNumber:   *res.PhoneNumber,
		PhotoURL:      *res.PhotoURL,
		EmailVerified: *res.EmailVerified,
	}
	return body
}

// NewGetUserResponseBodyTiny builds the HTTP response body from the result of
// the "Get user" endpoint of the "User" service.
func NewGetUserResponseBodyTiny(res *userviews.JeeekUserView) *GetUserResponseBodyTiny {
	body := &GetUserResponseBodyTiny{
		UserID:       *res.UserID,
		UserName:     *res.UserName,
		EmailAddress: *res.EmailAddress,
	}
	return body
}

// NewGetUserResponseBodyAdmin builds the HTTP response body from the result of
// the "Get user" endpoint of the "User" service.
func NewGetUserResponseBodyAdmin(res *userviews.JeeekUserView) *GetUserResponseBodyAdmin {
	body := &GetUserResponseBodyAdmin{
		UserID:         *res.UserID,
		UserName:       *res.UserName,
		EmailAddress:   *res.EmailAddress,
		PhoneNumber:    *res.PhoneNumber,
		PhotoURL:       *res.PhotoURL,
		EmailVerified:  *res.EmailVerified,
		Disabled:       res.Disabled,
		CreatedAt:      res.CreatedAt,
		LastSignedinAt: res.LastSignedinAt,
	}
	return body
}

// NewGetCurrentUserUnauthorizedResponseBody builds the HTTP response body from
// the result of the "Get current user" endpoint of the "User" service.
func NewGetCurrentUserUnauthorizedResponseBody(res user.Unauthorized) GetCurrentUserUnauthorizedResponseBody {
	body := GetCurrentUserUnauthorizedResponseBody(res)
	return body
}

// NewUpdateUserUnauthorizedResponseBody builds the HTTP response body from the
// result of the "Update user" endpoint of the "User" service.
func NewUpdateUserUnauthorizedResponseBody(res user.Unauthorized) UpdateUserUnauthorizedResponseBody {
	body := UpdateUserUnauthorizedResponseBody(res)
	return body
}

// NewListUserUnauthorizedResponseBody builds the HTTP response body from the
// result of the "List user" endpoint of the "User" service.
func NewListUserUnauthorizedResponseBody(res user.Unauthorized) ListUserUnauthorizedResponseBody {
	body := ListUserUnauthorizedResponseBody(res)
	return body
}

// NewGetUserUnauthorizedResponseBody builds the HTTP response body from the
// result of the "Get user" endpoint of the "User" service.
func NewGetUserUnauthorizedResponseBody(res user.Unauthorized) GetUserUnauthorizedResponseBody {
	body := GetUserUnauthorizedResponseBody(res)
	return body
}

// NewDeleteUserUnauthorizedResponseBody builds the HTTP response body from the
// result of the "Delete user" endpoint of the "User" service.
func NewDeleteUserUnauthorizedResponseBody(res user.Unauthorized) DeleteUserUnauthorizedResponseBody {
	body := DeleteUserUnauthorizedResponseBody(res)
	return body
}

// NewGetCurrentUserSessionTokenPayload builds a User service Get current user
// endpoint payload.
func NewGetCurrentUserSessionTokenPayload(token *string) *user.SessionTokenPayload {
	return &user.SessionTokenPayload{
		Token: token,
	}
}

// NewUpdateUserPayload builds a User service Update user endpoint payload.
func NewUpdateUserPayload(body *UpdateUserRequestBody, token *string) *user.UpdateUserPayload {
	v := &user.UpdateUserPayload{
		UserName:     body.UserName,
		EmailAddress: body.EmailAddress,
		PhoneNumber:  body.PhoneNumber,
		PhotoURL:     body.PhotoURL,
	}
	v.Token = token
	return v
}

// NewListUserSessionTokenPayload builds a User service List user endpoint
// payload.
func NewListUserSessionTokenPayload(token *string) *user.SessionTokenPayload {
	return &user.SessionTokenPayload{
		Token: token,
	}
}

// NewGetUserPayload builds a User service Get user endpoint payload.
func NewGetUserPayload(userID string, token *string) *user.GetUserPayload {
	return &user.GetUserPayload{
		UserID: userID,
		Token:  token,
	}
}

// NewDeleteUserSessionTokenPayload builds a User service Delete user endpoint
// payload.
func NewDeleteUserSessionTokenPayload(token *string) *user.SessionTokenPayload {
	return &user.SessionTokenPayload{
		Token: token,
	}
}

// ValidateUpdateUserRequestBody runs the validations defined on Update
// UserRequestBody
func ValidateUpdateUserRequestBody(body *UpdateUserRequestBody) (err error) {
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 1, true))
		}
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 20, false))
		}
	}
	if body.EmailAddress != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email_address", *body.EmailAddress, goa.FormatEmail))
	}
	if body.PhoneNumber != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.phone_number", *body.PhoneNumber, "^\\+?[\\d]{10,}$"))
	}
	return
}

// ValidateJeeekUserResponse runs the validations defined on JeeekUserResponse
func ValidateJeeekUserResponse(body *JeeekUserResponse) (err error) {
	if utf8.RuneCountInString(body.UserID) < 28 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", body.UserID, utf8.RuneCountInString(body.UserID), 28, true))
	}
	if utf8.RuneCountInString(body.UserID) > 28 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", body.UserID, utf8.RuneCountInString(body.UserID), 28, false))
	}
	if utf8.RuneCountInString(body.UserName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 1, true))
	}
	if utf8.RuneCountInString(body.UserName) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 20, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email_address", body.EmailAddress, goa.FormatEmail))

	err = goa.MergeErrors(err, goa.ValidatePattern("body.phone_number", body.PhoneNumber, "^\\+?[\\d]{10,}$"))
	return
}

// ValidateJeeekUserResponseTiny runs the validations defined on
// JeeekUserResponseTiny
func ValidateJeeekUserResponseTiny(body *JeeekUserResponseTiny) (err error) {
	if utf8.RuneCountInString(body.UserID) < 28 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", body.UserID, utf8.RuneCountInString(body.UserID), 28, true))
	}
	if utf8.RuneCountInString(body.UserID) > 28 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", body.UserID, utf8.RuneCountInString(body.UserID), 28, false))
	}
	if utf8.RuneCountInString(body.UserName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 1, true))
	}
	if utf8.RuneCountInString(body.UserName) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 20, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email_address", body.EmailAddress, goa.FormatEmail))

	return
}

// ValidateJeeekUserResponseAdmin runs the validations defined on
// JeeekUserResponseAdmin
func ValidateJeeekUserResponseAdmin(body *JeeekUserResponseAdmin) (err error) {
	if utf8.RuneCountInString(body.UserID) < 28 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", body.UserID, utf8.RuneCountInString(body.UserID), 28, true))
	}
	if utf8.RuneCountInString(body.UserID) > 28 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", body.UserID, utf8.RuneCountInString(body.UserID), 28, false))
	}
	if utf8.RuneCountInString(body.UserName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 1, true))
	}
	if utf8.RuneCountInString(body.UserName) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 20, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email_address", body.EmailAddress, goa.FormatEmail))

	err = goa.MergeErrors(err, goa.ValidatePattern("body.phone_number", body.PhoneNumber, "^\\+?[\\d]{10,}$"))
	return
}
