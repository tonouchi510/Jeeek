// Code generated by goa v3.0.4, DO NOT EDIT.
//
// Admin HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package server

import (
	"context"
	"io"
	"net/http"
	"strings"

	admin "github.com/tonouchi510/Jeeek/gen/admin"
	adminviews "github.com/tonouchi510/Jeeek/gen/admin/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAdminHealthCheckResponse returns an encoder for responses returned by
// the Admin admin health-check endpoint.
func EncodeAdminHealthCheckResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*adminviews.JeeekHealthcheck)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json; charset=utf-8")
		enc := encoder(ctx, w)
		body := NewAdminHealthCheckResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAdminHealthCheckRequest returns a decoder for requests sent to the
// Admin admin health-check endpoint.
func DecodeAdminHealthCheckRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewAdminHealthCheckSessionTokenPayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeAdminHealthCheckError returns an encoder for errors returned by the
// admin health-check Admin endpoint.
func EncodeAdminHealthCheckError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(admin.Unauthorized)
			enc := encoder(ctx, w)
			body := NewAdminHealthCheckUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeAdminSigninResponse returns an encoder for responses returned by the
// Admin admin signin endpoint.
func EncodeAdminSigninResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*adminviews.JeeekAdminSignin)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json; charset=utf-8")
		enc := encoder(ctx, w)
		body := NewAdminSigninResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAdminSigninRequest returns a decoder for requests sent to the Admin
// admin signin endpoint.
func DecodeAdminSigninRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AdminSigninRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAdminSigninRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAdminSigninAdminSignInPayload(&body)

		return payload, nil
	}
}

// EncodeAdminSigninError returns an encoder for errors returned by the admin
// signin Admin endpoint.
func EncodeAdminSigninError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(admin.Unauthorized)
			enc := encoder(ctx, w)
			body := NewAdminSigninUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
