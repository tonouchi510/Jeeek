// Code generated by goa v3.0.4, DO NOT EDIT.
//
// Admin HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	admin "github.com/tonouchi510/Jeeek/gen/admin"
	adminviews "github.com/tonouchi510/Jeeek/gen/admin/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAdminHealthCheckRequest instantiates a HTTP request object with method
// and path set to call the "Admin" service "admin health-check" endpoint
func (c *Client) BuildAdminHealthCheckRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminHealthCheckAdminPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin health-check", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminHealthCheckRequest returns an encoder for requests sent to the
// Admin admin health-check server.
func EncodeAdminHealthCheckRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.SessionTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin health-check", "*admin.SessionTokenPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		return nil
	}
}

// DecodeAdminHealthCheckResponse returns a decoder for responses returned by
// the Admin admin health-check endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeAdminHealthCheckResponse may return the following errors:
//	- "unauthorized" (type admin.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminHealthCheckResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminHealthCheckResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin health-check", err)
			}
			p := NewAdminHealthCheckJeeekHealthcheckOK(&body)
			view := "default"
			vres := &adminviews.JeeekHealthcheck{p, view}
			if err = adminviews.ValidateJeeekHealthcheck(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin health-check", err)
			}
			res := admin.NewJeeekHealthcheck(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AdminHealthCheckUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin health-check", err)
			}
			return nil, NewAdminHealthCheckUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin health-check", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminSigninRequest instantiates a HTTP request object with method and
// path set to call the "Admin" service "admin signin" endpoint
func (c *Client) BuildAdminSigninRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminSigninAdminPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin signin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminSigninRequest returns an encoder for requests sent to the Admin
// admin signin server.
func EncodeAdminSigninRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.AdminSignInPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin signin", "*admin.AdminSignInPayload", v)
		}
		body := NewAdminSigninRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Admin", "admin signin", err)
		}
		return nil
	}
}

// DecodeAdminSigninResponse returns a decoder for responses returned by the
// Admin admin signin endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAdminSigninResponse may return the following errors:
//	- "unauthorized" (type admin.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminSigninResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminSigninResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin signin", err)
			}
			p := NewAdminSigninJeeekAdminSigninOK(&body)
			view := "default"
			vres := &adminviews.JeeekAdminSignin{p, view}
			if err = adminviews.ValidateJeeekAdminSignin(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin signin", err)
			}
			res := admin.NewJeeekAdminSignin(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AdminSigninUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin signin", err)
			}
			return nil, NewAdminSigninUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin signin", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminCreateNewUserRequest instantiates a HTTP request object with
// method and path set to call the "Admin" service "admin create new user"
// endpoint
func (c *Client) BuildAdminCreateNewUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminCreateNewUserAdminPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin create new user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminCreateNewUserRequest returns an encoder for requests sent to the
// Admin admin create new user server.
func EncodeAdminCreateNewUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.AdminCreateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin create new user", "*admin.AdminCreateUserPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		body := NewAdminCreateNewUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Admin", "admin create new user", err)
		}
		return nil
	}
}

// DecodeAdminCreateNewUserResponse returns a decoder for responses returned by
// the Admin admin create new user endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeAdminCreateNewUserResponse may return the following errors:
//	- "unauthorized" (type admin.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminCreateNewUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body AdminCreateNewUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin create new user", err)
			}
			p := NewAdminCreateNewUserJeeekUserCreated(&body)
			view := resp.Header.Get("goa-view")
			vres := &adminviews.JeeekUser{p, view}
			if err = adminviews.ValidateJeeekUser(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin create new user", err)
			}
			res := admin.NewJeeekUser(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AdminCreateNewUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin create new user", err)
			}
			return nil, NewAdminCreateNewUserUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin create new user", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminUpdateUserRequest instantiates a HTTP request object with method
// and path set to call the "Admin" service "admin update user" endpoint
func (c *Client) BuildAdminUpdateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID string
	)
	{
		p, ok := v.(*admin.AdminUpdateUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Admin", "admin update user", "*admin.AdminUpdateUserPayload", v)
		}
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminUpdateUserAdminPath(userID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin update user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminUpdateUserRequest returns an encoder for requests sent to the
// Admin admin update user server.
func EncodeAdminUpdateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.AdminUpdateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin update user", "*admin.AdminUpdateUserPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		body := NewAdminUpdateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Admin", "admin update user", err)
		}
		return nil
	}
}

// DecodeAdminUpdateUserResponse returns a decoder for responses returned by
// the Admin admin update user endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeAdminUpdateUserResponse may return the following errors:
//	- "unauthorized" (type admin.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminUpdateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminUpdateUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin update user", err)
			}
			p := NewAdminUpdateUserJeeekUserOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &adminviews.JeeekUser{p, view}
			if err = adminviews.ValidateJeeekUser(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin update user", err)
			}
			res := admin.NewJeeekUser(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AdminUpdateUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin update user", err)
			}
			return nil, NewAdminUpdateUserUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin update user", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminListUserRequest instantiates a HTTP request object with method and
// path set to call the "Admin" service "admin list user" endpoint
func (c *Client) BuildAdminListUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminListUserAdminPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin list user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminListUserRequest returns an encoder for requests sent to the Admin
// admin list user server.
func EncodeAdminListUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.SessionTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin list user", "*admin.SessionTokenPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		return nil
	}
}

// DecodeAdminListUserResponse returns a decoder for responses returned by the
// Admin admin list user endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAdminListUserResponse may return the following errors:
//	- "unauthorized" (type admin.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminListUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminListUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin list user", err)
			}
			p := NewAdminListUserJeeekUserCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := adminviews.JeeekUserCollection{p, view}
			if err = adminviews.ValidateJeeekUserCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin list user", err)
			}
			res := admin.NewJeeekUserCollection(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AdminListUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin list user", err)
			}
			return nil, NewAdminListUserUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin list user", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminGetUserRequest instantiates a HTTP request object with method and
// path set to call the "Admin" service "admin get user" endpoint
func (c *Client) BuildAdminGetUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID string
	)
	{
		p, ok := v.(*admin.GetUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Admin", "admin get user", "*admin.GetUserPayload", v)
		}
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminGetUserAdminPath(userID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin get user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminGetUserRequest returns an encoder for requests sent to the Admin
// admin get user server.
func EncodeAdminGetUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.GetUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin get user", "*admin.GetUserPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		return nil
	}
}

// DecodeAdminGetUserResponse returns a decoder for responses returned by the
// Admin admin get user endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAdminGetUserResponse may return the following errors:
//	- "unauthorized" (type admin.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminGetUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminGetUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin get user", err)
			}
			p := NewAdminGetUserJeeekUserOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &adminviews.JeeekUser{p, view}
			if err = adminviews.ValidateJeeekUser(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin get user", err)
			}
			res := admin.NewJeeekUser(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AdminGetUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin get user", err)
			}
			return nil, NewAdminGetUserUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin get user", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminDeleteUserRequest instantiates a HTTP request object with method
// and path set to call the "Admin" service "admin delete user" endpoint
func (c *Client) BuildAdminDeleteUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID string
	)
	{
		p, ok := v.(*admin.AdminDeleteUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Admin", "admin delete user", "*admin.AdminDeleteUserPayload", v)
		}
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminDeleteUserAdminPath(userID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin delete user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminDeleteUserRequest returns an encoder for requests sent to the
// Admin admin delete user server.
func EncodeAdminDeleteUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.AdminDeleteUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin delete user", "*admin.AdminDeleteUserPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		return nil
	}
}

// DecodeAdminDeleteUserResponse returns a decoder for responses returned by
// the Admin admin delete user endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeAdminDeleteUserResponse may return the following errors:
//	- "unauthorized" (type admin.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body AdminDeleteUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin delete user", err)
			}
			return nil, NewAdminDeleteUserUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin delete user", resp.StatusCode, string(body))
		}
	}
}
