// Code generated by goa v3.0.4, DO NOT EDIT.
//
// Admin HTTP client types
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"unicode/utf8"

	admin "github.com/tonouchi510/Jeeek/gen/admin"
	adminviews "github.com/tonouchi510/Jeeek/gen/admin/views"
	goa "goa.design/goa/v3/pkg"
)

// AdminSigninRequestBody is the type of the "Admin" service "admin signin"
// endpoint HTTP request body.
type AdminSigninRequestBody struct {
	UID string `form:"uid" json:"uid" xml:"uid"`
}

// AdminCreateNewUserRequestBody is the type of the "Admin" service "admin
// create new user" endpoint HTTP request body.
type AdminCreateNewUserRequestBody struct {
	// ユーザーの表示名
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// ーザーのプライマリ メールアドレス
	EmailAddress string `form:"email_address" json:"email_address" xml:"email_address"`
	// ユーザのメインの電話番号
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// ユーザーの写真 URL
	PhotoURL string `form:"photo_url" json:"photo_url" xml:"photo_url"`
}

// AdminUpdateUserRequestBody is the type of the "Admin" service "admin update
// user" endpoint HTTP request body.
type AdminUpdateUserRequestBody struct {
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// AdminHealthCheckResponseBody is the type of the "Admin" service "admin
// health-check" endpoint HTTP response body.
type AdminHealthCheckResponseBody struct {
	Result *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// AdminSigninResponseBody is the type of the "Admin" service "admin signin"
// endpoint HTTP response body.
type AdminSigninResponseBody struct {
	// JWT used for authentication
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// AdminCreateNewUserResponseBody is the type of the "Admin" service "admin
// create new user" endpoint HTTP response body.
type AdminCreateNewUserResponseBody struct {
	// User id of firebase
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	// ユーザが作成された日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 最後にログインした日時
	LastSignedinAt *string `form:"last_signedin_at,omitempty" json:"last_signedin_at,omitempty" xml:"last_signedin_at,omitempty"`
}

// AdminUpdateUserResponseBody is the type of the "Admin" service "admin update
// user" endpoint HTTP response body.
type AdminUpdateUserResponseBody struct {
	// User id of firebase
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	// ユーザが作成された日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 最後にログインした日時
	LastSignedinAt *string `form:"last_signedin_at,omitempty" json:"last_signedin_at,omitempty" xml:"last_signedin_at,omitempty"`
}

// AdminListUserResponseBody is the type of the "Admin" service "admin list
// user" endpoint HTTP response body.
type AdminListUserResponseBody []*JeeekUserResponse

// AdminGetUserResponseBody is the type of the "Admin" service "admin get user"
// endpoint HTTP response body.
type AdminGetUserResponseBody struct {
	// User id of firebase
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	// ユーザが作成された日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 最後にログインした日時
	LastSignedinAt *string `form:"last_signedin_at,omitempty" json:"last_signedin_at,omitempty" xml:"last_signedin_at,omitempty"`
}

// AdminHealthCheckUnauthorizedResponseBody is the type of the "Admin" service
// "admin health-check" endpoint HTTP response body for the "unauthorized"
// error.
type AdminHealthCheckUnauthorizedResponseBody string

// AdminSigninUnauthorizedResponseBody is the type of the "Admin" service
// "admin signin" endpoint HTTP response body for the "unauthorized" error.
type AdminSigninUnauthorizedResponseBody string

// AdminCreateNewUserUnauthorizedResponseBody is the type of the "Admin"
// service "admin create new user" endpoint HTTP response body for the
// "unauthorized" error.
type AdminCreateNewUserUnauthorizedResponseBody string

// AdminUpdateUserUnauthorizedResponseBody is the type of the "Admin" service
// "admin update user" endpoint HTTP response body for the "unauthorized" error.
type AdminUpdateUserUnauthorizedResponseBody string

// AdminListUserUnauthorizedResponseBody is the type of the "Admin" service
// "admin list user" endpoint HTTP response body for the "unauthorized" error.
type AdminListUserUnauthorizedResponseBody string

// AdminGetUserUnauthorizedResponseBody is the type of the "Admin" service
// "admin get user" endpoint HTTP response body for the "unauthorized" error.
type AdminGetUserUnauthorizedResponseBody string

// AdminDeleteUserUnauthorizedResponseBody is the type of the "Admin" service
// "admin delete user" endpoint HTTP response body for the "unauthorized" error.
type AdminDeleteUserUnauthorizedResponseBody string

// JeeekUserResponse is used to define fields on response body types.
type JeeekUserResponse struct {
	// User id of firebase
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// ユーザーの表示名
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// ーザーのプライマリ メールアドレス
	EmailAddress *string `form:"email_address,omitempty" json:"email_address,omitempty" xml:"email_address,omitempty"`
	// ユーザのメインの電話番号
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// ユーザーの写真 URL
	PhotoURL *string `form:"photo_url,omitempty" json:"photo_url,omitempty" xml:"photo_url,omitempty"`
	// ユーザーのプライマリ メールアドレスが確認されているかどうか
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
	// ユーザが停止状態かどうか（論理削除）
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	// ユーザが作成された日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 最後にログインした日時
	LastSignedinAt *string `form:"last_signedin_at,omitempty" json:"last_signedin_at,omitempty" xml:"last_signedin_at,omitempty"`
}

// NewAdminSigninRequestBody builds the HTTP request body from the payload of
// the "admin signin" endpoint of the "Admin" service.
func NewAdminSigninRequestBody(p *admin.AdminSignInPayload) *AdminSigninRequestBody {
	body := &AdminSigninRequestBody{
		UID: p.UID,
	}
	return body
}

// NewAdminCreateNewUserRequestBody builds the HTTP request body from the
// payload of the "admin create new user" endpoint of the "Admin" service.
func NewAdminCreateNewUserRequestBody(p *admin.AdminCreateUserPayload) *AdminCreateNewUserRequestBody {
	body := &AdminCreateNewUserRequestBody{
		UserName:     p.UserName,
		EmailAddress: p.EmailAddress,
		PhoneNumber:  p.PhoneNumber,
		PhotoURL:     p.PhotoURL,
	}
	return body
}

// NewAdminUpdateUserRequestBody builds the HTTP request body from the payload
// of the "admin update user" endpoint of the "Admin" service.
func NewAdminUpdateUserRequestBody(p *admin.AdminUpdateUserPayload) *AdminUpdateUserRequestBody {
	body := &AdminUpdateUserRequestBody{
		UserName:      p.UserName,
		EmailAddress:  p.EmailAddress,
		PhoneNumber:   p.PhoneNumber,
		PhotoURL:      p.PhotoURL,
		EmailVerified: p.EmailVerified,
		Disabled:      p.Disabled,
	}
	return body
}

// NewAdminHealthCheckJeeekHealthcheckOK builds a "Admin" service "admin
// health-check" endpoint result from a HTTP "OK" response.
func NewAdminHealthCheckJeeekHealthcheckOK(body *AdminHealthCheckResponseBody) *adminviews.JeeekHealthcheckView {
	v := &adminviews.JeeekHealthcheckView{
		Result: body.Result,
	}
	return v
}

// NewAdminHealthCheckUnauthorized builds a Admin service admin health-check
// endpoint unauthorized error.
func NewAdminHealthCheckUnauthorized(body AdminHealthCheckUnauthorizedResponseBody) admin.Unauthorized {
	v := admin.Unauthorized(body)
	return v
}

// NewAdminSigninJeeekAdminSigninOK builds a "Admin" service "admin signin"
// endpoint result from a HTTP "OK" response.
func NewAdminSigninJeeekAdminSigninOK(body *AdminSigninResponseBody) *adminviews.JeeekAdminSigninView {
	v := &adminviews.JeeekAdminSigninView{
		Token: body.Token,
	}
	return v
}

// NewAdminSigninUnauthorized builds a Admin service admin signin endpoint
// unauthorized error.
func NewAdminSigninUnauthorized(body AdminSigninUnauthorizedResponseBody) admin.Unauthorized {
	v := admin.Unauthorized(body)
	return v
}

// NewAdminCreateNewUserJeeekUserCreated builds a "Admin" service "admin create
// new user" endpoint result from a HTTP "Created" response.
func NewAdminCreateNewUserJeeekUserCreated(body *AdminCreateNewUserResponseBody) *adminviews.JeeekUserView {
	v := &adminviews.JeeekUserView{
		UserID:         body.UserID,
		UserName:       body.UserName,
		EmailAddress:   body.EmailAddress,
		PhoneNumber:    body.PhoneNumber,
		PhotoURL:       body.PhotoURL,
		EmailVerified:  body.EmailVerified,
		Disabled:       body.Disabled,
		CreatedAt:      body.CreatedAt,
		LastSignedinAt: body.LastSignedinAt,
	}
	return v
}

// NewAdminCreateNewUserUnauthorized builds a Admin service admin create new
// user endpoint unauthorized error.
func NewAdminCreateNewUserUnauthorized(body AdminCreateNewUserUnauthorizedResponseBody) admin.Unauthorized {
	v := admin.Unauthorized(body)
	return v
}

// NewAdminUpdateUserJeeekUserOK builds a "Admin" service "admin update user"
// endpoint result from a HTTP "OK" response.
func NewAdminUpdateUserJeeekUserOK(body *AdminUpdateUserResponseBody) *adminviews.JeeekUserView {
	v := &adminviews.JeeekUserView{
		UserID:         body.UserID,
		UserName:       body.UserName,
		EmailAddress:   body.EmailAddress,
		PhoneNumber:    body.PhoneNumber,
		PhotoURL:       body.PhotoURL,
		EmailVerified:  body.EmailVerified,
		Disabled:       body.Disabled,
		CreatedAt:      body.CreatedAt,
		LastSignedinAt: body.LastSignedinAt,
	}
	return v
}

// NewAdminUpdateUserUnauthorized builds a Admin service admin update user
// endpoint unauthorized error.
func NewAdminUpdateUserUnauthorized(body AdminUpdateUserUnauthorizedResponseBody) admin.Unauthorized {
	v := admin.Unauthorized(body)
	return v
}

// NewAdminListUserJeeekUserCollectionOK builds a "Admin" service "admin list
// user" endpoint result from a HTTP "OK" response.
func NewAdminListUserJeeekUserCollectionOK(body AdminListUserResponseBody) adminviews.JeeekUserCollectionView {
	v := make([]*adminviews.JeeekUserView, len(body))
	for i, val := range body {
		v[i] = &adminviews.JeeekUserView{
			UserID:         val.UserID,
			UserName:       val.UserName,
			EmailAddress:   val.EmailAddress,
			PhoneNumber:    val.PhoneNumber,
			PhotoURL:       val.PhotoURL,
			EmailVerified:  val.EmailVerified,
			Disabled:       val.Disabled,
			CreatedAt:      val.CreatedAt,
			LastSignedinAt: val.LastSignedinAt,
		}
	}
	return v
}

// NewAdminListUserUnauthorized builds a Admin service admin list user endpoint
// unauthorized error.
func NewAdminListUserUnauthorized(body AdminListUserUnauthorizedResponseBody) admin.Unauthorized {
	v := admin.Unauthorized(body)
	return v
}

// NewAdminGetUserJeeekUserOK builds a "Admin" service "admin get user"
// endpoint result from a HTTP "OK" response.
func NewAdminGetUserJeeekUserOK(body *AdminGetUserResponseBody) *adminviews.JeeekUserView {
	v := &adminviews.JeeekUserView{
		UserID:         body.UserID,
		UserName:       body.UserName,
		EmailAddress:   body.EmailAddress,
		PhoneNumber:    body.PhoneNumber,
		PhotoURL:       body.PhotoURL,
		EmailVerified:  body.EmailVerified,
		Disabled:       body.Disabled,
		CreatedAt:      body.CreatedAt,
		LastSignedinAt: body.LastSignedinAt,
	}
	return v
}

// NewAdminGetUserUnauthorized builds a Admin service admin get user endpoint
// unauthorized error.
func NewAdminGetUserUnauthorized(body AdminGetUserUnauthorizedResponseBody) admin.Unauthorized {
	v := admin.Unauthorized(body)
	return v
}

// NewAdminDeleteUserUnauthorized builds a Admin service admin delete user
// endpoint unauthorized error.
func NewAdminDeleteUserUnauthorized(body AdminDeleteUserUnauthorizedResponseBody) admin.Unauthorized {
	v := admin.Unauthorized(body)
	return v
}

// ValidateJeeekUserResponse runs the validations defined on JeeekUserResponse
func ValidateJeeekUserResponse(body *JeeekUserResponse) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_name", "body"))
	}
	if body.EmailAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_address", "body"))
	}
	if body.PhotoURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("photo_url", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone_number", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.UserID != nil {
		if utf8.RuneCountInString(*body.UserID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", *body.UserID, utf8.RuneCountInString(*body.UserID), 28, true))
		}
	}
	if body.UserID != nil {
		if utf8.RuneCountInString(*body.UserID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", *body.UserID, utf8.RuneCountInString(*body.UserID), 28, false))
		}
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 1, true))
		}
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 20, false))
		}
	}
	if body.EmailAddress != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email_address", *body.EmailAddress, goa.FormatEmail))
	}
	if body.PhoneNumber != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.phone_number", *body.PhoneNumber, "^\\+?[\\d]{10,}$"))
	}
	return
}
