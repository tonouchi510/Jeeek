// Code generated by goa v3.0.4, DO NOT EDIT.
//
// Admin client HTTP transport
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Admin service endpoint HTTP clients.
type Client struct {
	// AdminHealthCheck Doer is the HTTP client used to make requests to the admin
	// health-check endpoint.
	AdminHealthCheckDoer goahttp.Doer

	// AdminSignin Doer is the HTTP client used to make requests to the admin
	// signin endpoint.
	AdminSigninDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Admin service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AdminHealthCheckDoer: doer,
		AdminSigninDoer:      doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// AdminHealthCheck returns an endpoint that makes HTTP requests to the Admin
// service admin health-check server.
func (c *Client) AdminHealthCheck() goa.Endpoint {
	var (
		encodeRequest  = EncodeAdminHealthCheckRequest(c.encoder)
		decodeResponse = DecodeAdminHealthCheckResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAdminHealthCheckRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AdminHealthCheckDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Admin", "admin health-check", err)
		}
		return decodeResponse(resp)
	}
}

// AdminSignin returns an endpoint that makes HTTP requests to the Admin
// service admin signin server.
func (c *Client) AdminSignin() goa.Endpoint {
	var (
		encodeRequest  = EncodeAdminSigninRequest(c.encoder)
		decodeResponse = DecodeAdminSigninResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAdminSigninRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AdminSigninDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Admin", "admin signin", err)
		}
		return decodeResponse(resp)
	}
}
