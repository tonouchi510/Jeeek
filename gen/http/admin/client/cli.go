// Code generated by goa v3.0.4, DO NOT EDIT.
//
// Admin HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	admin "github.com/tonouchi510/Jeeek/gen/admin"
	goa "goa.design/goa/v3/pkg"
)

// BuildAdminHealthCheckPayload builds the payload for the Admin admin
// health-check endpoint from CLI flags.
func BuildAdminHealthCheckPayload(adminAdminHealthCheckToken string) (*admin.SessionTokenPayload, error) {
	var token *string
	{
		if adminAdminHealthCheckToken != "" {
			token = &adminAdminHealthCheckToken
		}
	}
	payload := &admin.SessionTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildAdminSigninPayload builds the payload for the Admin admin signin
// endpoint from CLI flags.
func BuildAdminSigninPayload(adminAdminSigninBody string) (*admin.AdminSignInPayload, error) {
	var err error
	var body AdminSigninRequestBody
	{
		err = json.Unmarshal([]byte(adminAdminSigninBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"uid\": \"4WIbqiNIpIYXqrfBMVZsbKCepau1\"\n   }'")
		}
	}
	v := &admin.AdminSignInPayload{
		UID: body.UID,
	}
	return v, nil
}

// BuildAdminCreateNewUserPayload builds the payload for the Admin admin create
// new user endpoint from CLI flags.
func BuildAdminCreateNewUserPayload(adminAdminCreateNewUserBody string, adminAdminCreateNewUserToken string) (*admin.AdminCreateUserPayload, error) {
	var err error
	var body AdminCreateNewUserRequestBody
	{
		err = json.Unmarshal([]byte(adminAdminCreateNewUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email_address\": \"keisuke.honda+testuser@ynu.jp\",\n      \"phone_number\": \"08079469367\",\n      \"photo_url\": \"https://imageurl.com\",\n      \"user_name\": \"keisuke.honda\"\n   }'")
		}
		if utf8.RuneCountInString(body.UserName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 1, true))
		}
		if utf8.RuneCountInString(body.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 20, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email_address", body.EmailAddress, goa.FormatEmail))

		err = goa.MergeErrors(err, goa.ValidatePattern("body.phone_number", body.PhoneNumber, "^\\+?[\\d]{10,}$"))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if adminAdminCreateNewUserToken != "" {
			token = &adminAdminCreateNewUserToken
		}
	}
	v := &admin.AdminCreateUserPayload{
		UserName:     body.UserName,
		EmailAddress: body.EmailAddress,
		PhoneNumber:  body.PhoneNumber,
		PhotoURL:     body.PhotoURL,
	}
	v.Token = token
	return v, nil
}

// BuildAdminUpdateUserPayload builds the payload for the Admin admin update
// user endpoint from CLI flags.
func BuildAdminUpdateUserPayload(adminAdminUpdateUserBody string, adminAdminUpdateUserUserID string, adminAdminUpdateUserToken string) (*admin.AdminUpdateUserPayload, error) {
	var err error
	var body AdminUpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(adminAdminUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"disabled\": true,\n      \"email_address\": \"keisuke.honda+testuser@ynu.jp\",\n      \"email_verified\": true,\n      \"phone_number\": \"08079469367\",\n      \"photo_url\": \"https://imageurl.com\",\n      \"user_name\": \"keisuke.honda\"\n   }'")
		}
		if body.UserName != nil {
			if utf8.RuneCountInString(*body.UserName) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 1, true))
			}
		}
		if body.UserName != nil {
			if utf8.RuneCountInString(*body.UserName) > 20 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 20, false))
			}
		}
		if body.EmailAddress != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.email_address", *body.EmailAddress, goa.FormatEmail))
		}
		if body.PhoneNumber != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.phone_number", *body.PhoneNumber, "^\\+?[\\d]{10,}$"))
		}
		if err != nil {
			return nil, err
		}
	}
	var userID string
	{
		userID = adminAdminUpdateUserUserID
	}
	var token *string
	{
		if adminAdminUpdateUserToken != "" {
			token = &adminAdminUpdateUserToken
		}
	}
	v := &admin.AdminUpdateUserPayload{
		UserName:      body.UserName,
		EmailAddress:  body.EmailAddress,
		PhoneNumber:   body.PhoneNumber,
		PhotoURL:      body.PhotoURL,
		EmailVerified: body.EmailVerified,
		Disabled:      body.Disabled,
	}
	v.UserID = userID
	v.Token = token
	return v, nil
}

// BuildAdminListUserPayload builds the payload for the Admin admin list user
// endpoint from CLI flags.
func BuildAdminListUserPayload(adminAdminListUserToken string) (*admin.SessionTokenPayload, error) {
	var token *string
	{
		if adminAdminListUserToken != "" {
			token = &adminAdminListUserToken
		}
	}
	payload := &admin.SessionTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildAdminGetUserPayload builds the payload for the Admin admin get user
// endpoint from CLI flags.
func BuildAdminGetUserPayload(adminAdminGetUserUserID string, adminAdminGetUserToken string) (*admin.GetUserPayload, error) {
	var userID string
	{
		userID = adminAdminGetUserUserID
	}
	var token *string
	{
		if adminAdminGetUserToken != "" {
			token = &adminAdminGetUserToken
		}
	}
	payload := &admin.GetUserPayload{
		UserID: userID,
		Token:  token,
	}
	return payload, nil
}

// BuildAdminDeleteUserPayload builds the payload for the Admin admin delete
// user endpoint from CLI flags.
func BuildAdminDeleteUserPayload(adminAdminDeleteUserUserID string, adminAdminDeleteUserToken string) (*admin.AdminDeleteUserPayload, error) {
	var userID string
	{
		userID = adminAdminDeleteUserUserID
	}
	var token *string
	{
		if adminAdminDeleteUserToken != "" {
			token = &adminAdminDeleteUserToken
		}
	}
	payload := &admin.AdminDeleteUserPayload{
		UserID: userID,
		Token:  token,
	}
	return payload, nil
}
