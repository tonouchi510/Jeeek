// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP server types
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package server

import (
	activity "github.com/tonouchi510/Jeeek/gen/activity"
	goa "goa.design/goa/v3/pkg"
)

// ManualPostOfActivityRequestBody is the type of the "Activity" service
// "Manual post of activity" endpoint HTTP request body.
type ManualPostOfActivityRequestBody struct {
	Activity *ActivityRequestBody `form:"Activity,omitempty" json:"Activity,omitempty" xml:"Activity,omitempty"`
}

// ManualPostOfActivityUnauthorizedResponseBody is the type of the "Activity"
// service "Manual post of activity" endpoint HTTP response body for the
// "unauthorized" error.
type ManualPostOfActivityUnauthorizedResponseBody string

// RefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody is the
// type of the "Activity" service "Refresh activities of all cooperation
// services" endpoint HTTP response body for the "unauthorized" error.
type RefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody string

// RefreshQiitaActivitiesUnauthorizedResponseBody is the type of the "Activity"
// service "Refresh qiita activities" endpoint HTTP response body for the
// "unauthorized" error.
type RefreshQiitaActivitiesUnauthorizedResponseBody string

// PickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody is the type of the
// "Activity" service "Pick out all past activities of qiita" endpoint HTTP
// response body for the "unauthorized" error.
type PickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody string

// ActivityRequestBody is used to define fields on request body types.
type ActivityRequestBody struct {
	// 投稿のID（Firestore上ではドキュメントIDになる）
	ID       *string              `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	UserTiny *UserTinyRequestBody `form:"userTiny,omitempty" json:"userTiny,omitempty" xml:"userTiny,omitempty"`
	// 投稿のカテゴリー（0: 学習, 1: 開発, 2: 執筆, 3: 賞等）
	Category *int `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// 投稿のランク（0~3 -> C~S に対応してレベルを設定）
	Rank    *int                `form:"rank,omitempty" json:"rank,omitempty" xml:"rank,omitempty"`
	Content *ContentRequestBody `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// 投稿に紐づく技術タグを設定する
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// 投稿に対して'いいね'したユーザのUID
	Favorites []string `form:"favorites,omitempty" json:"favorites,omitempty" xml:"favorites,omitempty"`
	// 投稿に対して'Gifting'したユーザのUID
	Gifts []string `form:"gifts,omitempty" json:"gifts,omitempty" xml:"gifts,omitempty"`
}

// UserTinyRequestBody is used to define fields on request body types.
type UserTinyRequestBody struct {
	// 投稿したユーザのUID
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// 投稿したユーザの名前
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 投稿したユーザの写真Url
	PhotoURL *string `form:"photoUrl,omitempty" json:"photoUrl,omitempty" xml:"photoUrl,omitempty"`
}

// ContentRequestBody is used to define fields on request body types.
type ContentRequestBody struct {
	// 投稿の主題
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// 投稿に関連するUrl（オプション）
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// 投稿についての自由記述欄
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" xml:"comment,omitempty"`
}

// NewManualPostOfActivityUnauthorizedResponseBody builds the HTTP response
// body from the result of the "Manual post of activity" endpoint of the
// "Activity" service.
func NewManualPostOfActivityUnauthorizedResponseBody(res activity.Unauthorized) ManualPostOfActivityUnauthorizedResponseBody {
	body := ManualPostOfActivityUnauthorizedResponseBody(res)
	return body
}

// NewRefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody builds
// the HTTP response body from the result of the "Refresh activities of all
// cooperation services" endpoint of the "Activity" service.
func NewRefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody(res activity.Unauthorized) RefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody {
	body := RefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody(res)
	return body
}

// NewRefreshQiitaActivitiesUnauthorizedResponseBody builds the HTTP response
// body from the result of the "Refresh qiita activities" endpoint of the
// "Activity" service.
func NewRefreshQiitaActivitiesUnauthorizedResponseBody(res activity.Unauthorized) RefreshQiitaActivitiesUnauthorizedResponseBody {
	body := RefreshQiitaActivitiesUnauthorizedResponseBody(res)
	return body
}

// NewPickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody builds the HTTP
// response body from the result of the "Pick out all past activities of qiita"
// endpoint of the "Activity" service.
func NewPickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody(res activity.Unauthorized) PickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody {
	body := PickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody(res)
	return body
}

// NewManualPostOfActivityActivityPostPayload builds a Activity service Manual
// post of activity endpoint payload.
func NewManualPostOfActivityActivityPostPayload(body *ManualPostOfActivityRequestBody, token *string) *activity.ActivityPostPayload {
	v := &activity.ActivityPostPayload{}
	if body.Activity != nil {
		v.Activity = unmarshalActivityRequestBodyToActivityActivity(body.Activity)
	}
	v.Token = token
	return v
}

// NewRefreshActivitiesOfAllCooperationServicesSessionTokenPayload builds a
// Activity service Refresh activities of all cooperation services endpoint
// payload.
func NewRefreshActivitiesOfAllCooperationServicesSessionTokenPayload(token *string) *activity.SessionTokenPayload {
	return &activity.SessionTokenPayload{
		Token: token,
	}
}

// NewRefreshQiitaActivitiesSessionTokenPayload builds a Activity service
// Refresh qiita activities endpoint payload.
func NewRefreshQiitaActivitiesSessionTokenPayload(token *string) *activity.SessionTokenPayload {
	return &activity.SessionTokenPayload{
		Token: token,
	}
}

// NewPickOutAllPastActivitiesOfQiitaSessionTokenPayload builds a Activity
// service Pick out all past activities of qiita endpoint payload.
func NewPickOutAllPastActivitiesOfQiitaSessionTokenPayload(token *string) *activity.SessionTokenPayload {
	return &activity.SessionTokenPayload{
		Token: token,
	}
}

// ValidateManualPostOfActivityRequestBody runs the validations defined on
// Manual Post Of ActivityRequestBody
func ValidateManualPostOfActivityRequestBody(body *ManualPostOfActivityRequestBody) (err error) {
	if body.Activity != nil {
		if err2 := ValidateActivityRequestBody(body.Activity); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateActivityRequestBody runs the validations defined on
// ActivityRequestBody
func ValidateActivityRequestBody(body *ActivityRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserTiny == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userTiny", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.Rank == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rank", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.Favorites == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("favorites", "body"))
	}
	if body.Gifts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gifts", "body"))
	}
	if body.UserTiny != nil {
		if err2 := ValidateUserTinyRequestBody(body.UserTiny); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Content != nil {
		if err2 := ValidateContentRequestBody(body.Content); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserTinyRequestBody runs the validations defined on
// UserTinyRequestBody
func ValidateUserTinyRequestBody(body *UserTinyRequestBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateContentRequestBody runs the validations defined on ContentRequestBody
func ValidateContentRequestBody(body *ContentRequestBody) (err error) {
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	return
}
