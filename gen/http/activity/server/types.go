// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP server types
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package server

import (
	activity "github.com/tonouchi510/Jeeek/gen/activity"
)

// ReflectionActivityRequestBody is the type of the "Activity" service
// "Reflection activity" endpoint HTTP request body.
type ReflectionActivityRequestBody struct {
	Attributes []*AttributesRequestBody `form:"Attributes,omitempty" json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	Data       []byte                   `form:"Data,omitempty" json:"Data,omitempty" xml:"Data,omitempty"`
}

// ReflectionActivityUnauthorizedResponseBody is the type of the "Activity"
// service "Reflection activity" endpoint HTTP response body for the
// "unauthorized" error.
type ReflectionActivityUnauthorizedResponseBody string

// AttributesRequestBody is used to define fields on request body types.
type AttributesRequestBody struct {
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
}

// NewReflectionActivityUnauthorizedResponseBody builds the HTTP response body
// from the result of the "Reflection activity" endpoint of the "Activity"
// service.
func NewReflectionActivityUnauthorizedResponseBody(res activity.Unauthorized) ReflectionActivityUnauthorizedResponseBody {
	body := ReflectionActivityUnauthorizedResponseBody(res)
	return body
}

// NewReflectionActivityActivityPostPayload builds a Activity service
// Reflection activity endpoint payload.
func NewReflectionActivityActivityPostPayload(body *ReflectionActivityRequestBody, token *string) *activity.ActivityPostPayload {
	v := &activity.ActivityPostPayload{
		Data: body.Data,
	}
	if body.Attributes != nil {
		v.Attributes = make([]*activity.Attributes, len(body.Attributes))
		for i, val := range body.Attributes {
			v.Attributes[i] = unmarshalAttributesRequestBodyToActivityAttributes(val)
		}
	}
	v.Token = token
	return v
}
