// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package server

import (
	"context"
	"net/http"
	"strings"

	activity "github.com/tonouchi510/Jeeek/gen/activity"
	goahttp "goa.design/goa/v3/http"
)

// EncodeFetchQiitaArticleByQiitaUserIDResponse returns an encoder for
// responses returned by the Activity Fetch qiita article by qiita-user-id
// endpoint.
func EncodeFetchQiitaArticleByQiitaUserIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeFetchQiitaArticleByQiitaUserIDRequest returns a decoder for requests
// sent to the Activity Fetch qiita article by qiita-user-id endpoint.
func DecodeFetchQiitaArticleByQiitaUserIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			userID string
			token  *string

			params = mux.Vars(r)
		)
		userID = params["user_id"]
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewFetchQiitaArticleByQiitaUserIDGetActivityPayload(userID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeFetchQiitaArticleByQiitaUserIDError returns an encoder for errors
// returned by the Fetch qiita article by qiita-user-id Activity endpoint.
func EncodeFetchQiitaArticleByQiitaUserIDError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(activity.Unauthorized)
			enc := encoder(ctx, w)
			body := NewFetchQiitaArticleByQiitaUserIDUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
