// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP server
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package server

import (
	"context"
	"net/http"

	activity "github.com/tonouchi510/Jeeek/gen/activity"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the Activity service endpoint HTTP handlers.
type Server struct {
	Mounts                                    []*MountPoint
	ManualPostOfActivity                      http.Handler
	RefreshActivitiesOfAllCooperationServices http.Handler
	RefreshQiitaActivities                    http.Handler
	PickOutAllPastActivitiesOfQiita           http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Activity service endpoints.
func New(
	e *activity.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ManualPostOfActivity", "POST", "/v1/activity/post"},
			{"RefreshActivitiesOfAllCooperationServices", "GET", "/v1/activity/co-service/batch"},
			{"RefreshQiitaActivities", "GET", "/v1/activity/co-service/qiita"},
			{"PickOutAllPastActivitiesOfQiita", "GET", "/v1/activity/co-service/qiita/initialization"},
		},
		ManualPostOfActivity:                      NewManualPostOfActivityHandler(e.ManualPostOfActivity, mux, dec, enc, eh),
		RefreshActivitiesOfAllCooperationServices: NewRefreshActivitiesOfAllCooperationServicesHandler(e.RefreshActivitiesOfAllCooperationServices, mux, dec, enc, eh),
		RefreshQiitaActivities:                    NewRefreshQiitaActivitiesHandler(e.RefreshQiitaActivities, mux, dec, enc, eh),
		PickOutAllPastActivitiesOfQiita:           NewPickOutAllPastActivitiesOfQiitaHandler(e.PickOutAllPastActivitiesOfQiita, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Activity" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ManualPostOfActivity = m(s.ManualPostOfActivity)
	s.RefreshActivitiesOfAllCooperationServices = m(s.RefreshActivitiesOfAllCooperationServices)
	s.RefreshQiitaActivities = m(s.RefreshQiitaActivities)
	s.PickOutAllPastActivitiesOfQiita = m(s.PickOutAllPastActivitiesOfQiita)
}

// Mount configures the mux to serve the Activity endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountManualPostOfActivityHandler(mux, h.ManualPostOfActivity)
	MountRefreshActivitiesOfAllCooperationServicesHandler(mux, h.RefreshActivitiesOfAllCooperationServices)
	MountRefreshQiitaActivitiesHandler(mux, h.RefreshQiitaActivities)
	MountPickOutAllPastActivitiesOfQiitaHandler(mux, h.PickOutAllPastActivitiesOfQiita)
}

// MountManualPostOfActivityHandler configures the mux to serve the "Activity"
// service "Manual post of activity" endpoint.
func MountManualPostOfActivityHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/activity/post", f)
}

// NewManualPostOfActivityHandler creates a HTTP handler which loads the HTTP
// request and calls the "Activity" service "Manual post of activity" endpoint.
func NewManualPostOfActivityHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeManualPostOfActivityRequest(mux, dec)
		encodeResponse = EncodeManualPostOfActivityResponse(enc)
		encodeError    = EncodeManualPostOfActivityError(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Manual post of activity")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Activity")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountRefreshActivitiesOfAllCooperationServicesHandler configures the mux to
// serve the "Activity" service "Refresh activities of all cooperation
// services" endpoint.
func MountRefreshActivitiesOfAllCooperationServicesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/activity/co-service/batch", f)
}

// NewRefreshActivitiesOfAllCooperationServicesHandler creates a HTTP handler
// which loads the HTTP request and calls the "Activity" service "Refresh
// activities of all cooperation services" endpoint.
func NewRefreshActivitiesOfAllCooperationServicesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeRefreshActivitiesOfAllCooperationServicesRequest(mux, dec)
		encodeResponse = EncodeRefreshActivitiesOfAllCooperationServicesResponse(enc)
		encodeError    = EncodeRefreshActivitiesOfAllCooperationServicesError(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Refresh activities of all cooperation services")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Activity")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountRefreshQiitaActivitiesHandler configures the mux to serve the
// "Activity" service "Refresh qiita activities" endpoint.
func MountRefreshQiitaActivitiesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/activity/co-service/qiita", f)
}

// NewRefreshQiitaActivitiesHandler creates a HTTP handler which loads the HTTP
// request and calls the "Activity" service "Refresh qiita activities" endpoint.
func NewRefreshQiitaActivitiesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeRefreshQiitaActivitiesRequest(mux, dec)
		encodeResponse = EncodeRefreshQiitaActivitiesResponse(enc)
		encodeError    = EncodeRefreshQiitaActivitiesError(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Refresh qiita activities")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Activity")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountPickOutAllPastActivitiesOfQiitaHandler configures the mux to serve the
// "Activity" service "Pick out all past activities of qiita" endpoint.
func MountPickOutAllPastActivitiesOfQiitaHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/activity/co-service/qiita/initialization", f)
}

// NewPickOutAllPastActivitiesOfQiitaHandler creates a HTTP handler which loads
// the HTTP request and calls the "Activity" service "Pick out all past
// activities of qiita" endpoint.
func NewPickOutAllPastActivitiesOfQiitaHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodePickOutAllPastActivitiesOfQiitaRequest(mux, dec)
		encodeResponse = EncodePickOutAllPastActivitiesOfQiitaResponse(enc)
		encodeError    = EncodePickOutAllPastActivitiesOfQiitaError(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Pick out all past activities of qiita")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Activity")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
