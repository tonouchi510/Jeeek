// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP client types
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	activity "github.com/tonouchi510/Jeeek/gen/activity"
)

// ReflectionActivityRequestBody is the type of the "Activity" service
// "Reflection activity" endpoint HTTP request body.
type ReflectionActivityRequestBody struct {
	Attributes []*AttributesRequestBody `form:"Attributes,omitempty" json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	Data       []byte                   `form:"Data,omitempty" json:"Data,omitempty" xml:"Data,omitempty"`
}

// ReflectionActivityUnauthorizedResponseBody is the type of the "Activity"
// service "Reflection activity" endpoint HTTP response body for the
// "unauthorized" error.
type ReflectionActivityUnauthorizedResponseBody string

// AttributesRequestBody is used to define fields on request body types.
type AttributesRequestBody struct {
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
}

// NewReflectionActivityRequestBody builds the HTTP request body from the
// payload of the "Reflection activity" endpoint of the "Activity" service.
func NewReflectionActivityRequestBody(p *activity.ActivityPostPayload) *ReflectionActivityRequestBody {
	body := &ReflectionActivityRequestBody{
		Data: p.Data,
	}
	if p.Attributes != nil {
		body.Attributes = make([]*AttributesRequestBody, len(p.Attributes))
		for i, val := range p.Attributes {
			body.Attributes[i] = marshalActivityAttributesToAttributesRequestBody(val)
		}
	}
	return body
}

// NewReflectionActivityUnauthorized builds a Activity service Reflection
// activity endpoint unauthorized error.
func NewReflectionActivityUnauthorized(body ReflectionActivityUnauthorizedResponseBody) activity.Unauthorized {
	v := activity.Unauthorized(body)
	return v
}
