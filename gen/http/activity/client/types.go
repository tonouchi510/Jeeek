// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP client types
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	activity "github.com/tonouchi510/Jeeek/gen/activity"
	goa "goa.design/goa/v3/pkg"
)

// ManualPostOfActivityRequestBody is the type of the "Activity" service
// "Manual post of activity" endpoint HTTP request body.
type ManualPostOfActivityRequestBody struct {
	Activity *ActivityRequestBody `form:"Activity,omitempty" json:"Activity,omitempty" xml:"Activity,omitempty"`
}

// ManualPostOfActivityUnauthorizedResponseBody is the type of the "Activity"
// service "Manual post of activity" endpoint HTTP response body for the
// "unauthorized" error.
type ManualPostOfActivityUnauthorizedResponseBody string

// RefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody is the
// type of the "Activity" service "Refresh activities of all cooperation
// services" endpoint HTTP response body for the "unauthorized" error.
type RefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody string

// RefreshQiitaActivitiesUnauthorizedResponseBody is the type of the "Activity"
// service "Refresh qiita activities" endpoint HTTP response body for the
// "unauthorized" error.
type RefreshQiitaActivitiesUnauthorizedResponseBody string

// PickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody is the type of the
// "Activity" service "Pick out all past activities of qiita" endpoint HTTP
// response body for the "unauthorized" error.
type PickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody string

// ActivityRequestBody is used to define fields on request body types.
type ActivityRequestBody struct {
	// 投稿のID（Firestore上ではドキュメントIDになる）
	ID       string               `form:"id" json:"id" xml:"id"`
	UserTiny *UserTinyRequestBody `form:"userTiny" json:"userTiny" xml:"userTiny"`
	// 投稿のカテゴリー（0: 学習, 1: 開発, 2: 執筆, 3: 賞等）
	Category int `form:"category" json:"category" xml:"category"`
	// 投稿のランク（0~3 -> C~S に対応してレベルを設定）
	Rank    int                 `form:"rank" json:"rank" xml:"rank"`
	Content *ContentRequestBody `form:"content" json:"content" xml:"content"`
	// 投稿に紐づく技術タグを設定する
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// 投稿に対して'いいね'したユーザのUID
	Favorites []string `form:"favorites" json:"favorites" xml:"favorites"`
	// 投稿に対して'Gifting'したユーザのUID
	Gifts []string `form:"gifts" json:"gifts" xml:"gifts"`
}

// UserTinyRequestBody is used to define fields on request body types.
type UserTinyRequestBody struct {
	// 投稿したユーザのUID
	UID string `form:"uid" json:"uid" xml:"uid"`
	// 投稿したユーザの名前
	Name string `form:"name" json:"name" xml:"name"`
	// 投稿したユーザの写真Url
	PhotoURL *string `form:"photoUrl,omitempty" json:"photoUrl,omitempty" xml:"photoUrl,omitempty"`
}

// ContentRequestBody is used to define fields on request body types.
type ContentRequestBody struct {
	// 投稿の主題
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// 投稿に関連するUrl（オプション）
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// 投稿についての自由記述欄
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" xml:"comment,omitempty"`
}

// NewManualPostOfActivityRequestBody builds the HTTP request body from the
// payload of the "Manual post of activity" endpoint of the "Activity" service.
func NewManualPostOfActivityRequestBody(p *activity.ActivityPostPayload) *ManualPostOfActivityRequestBody {
	body := &ManualPostOfActivityRequestBody{}
	if p.Activity != nil {
		body.Activity = marshalActivityActivityToActivityRequestBody(p.Activity)
	}
	return body
}

// NewManualPostOfActivityUnauthorized builds a Activity service Manual post of
// activity endpoint unauthorized error.
func NewManualPostOfActivityUnauthorized(body ManualPostOfActivityUnauthorizedResponseBody) activity.Unauthorized {
	v := activity.Unauthorized(body)
	return v
}

// NewRefreshActivitiesOfAllCooperationServicesUnauthorized builds a Activity
// service Refresh activities of all cooperation services endpoint unauthorized
// error.
func NewRefreshActivitiesOfAllCooperationServicesUnauthorized(body RefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody) activity.Unauthorized {
	v := activity.Unauthorized(body)
	return v
}

// NewRefreshQiitaActivitiesUnauthorized builds a Activity service Refresh
// qiita activities endpoint unauthorized error.
func NewRefreshQiitaActivitiesUnauthorized(body RefreshQiitaActivitiesUnauthorizedResponseBody) activity.Unauthorized {
	v := activity.Unauthorized(body)
	return v
}

// NewPickOutAllPastActivitiesOfQiitaUnauthorized builds a Activity service
// Pick out all past activities of qiita endpoint unauthorized error.
func NewPickOutAllPastActivitiesOfQiitaUnauthorized(body PickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody) activity.Unauthorized {
	v := activity.Unauthorized(body)
	return v
}

// ValidateActivityRequestBody runs the validations defined on
// ActivityRequestBody
func ValidateActivityRequestBody(body *ActivityRequestBody) (err error) {
	if body.UserTiny == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userTiny", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.Favorites == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("favorites", "body"))
	}
	if body.Gifts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gifts", "body"))
	}
	return
}
