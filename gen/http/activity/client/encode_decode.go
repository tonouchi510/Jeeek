// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	activity "github.com/tonouchi510/Jeeek/gen/activity"
	goahttp "goa.design/goa/v3/http"
)

// BuildManualPostOfActivityRequest instantiates a HTTP request object with
// method and path set to call the "Activity" service "Manual post of activity"
// endpoint
func (c *Client) BuildManualPostOfActivityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ManualPostOfActivityActivityPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Activity", "Manual post of activity", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeManualPostOfActivityRequest returns an encoder for requests sent to
// the Activity Manual post of activity server.
func EncodeManualPostOfActivityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*activity.ActivityPostPayload)
		if !ok {
			return goahttp.ErrInvalidType("Activity", "Manual post of activity", "*activity.ActivityPostPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		body := NewManualPostOfActivityRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Activity", "Manual post of activity", err)
		}
		return nil
	}
}

// DecodeManualPostOfActivityResponse returns a decoder for responses returned
// by the Activity Manual post of activity endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeManualPostOfActivityResponse may return the following errors:
//	- "unauthorized" (type activity.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeManualPostOfActivityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body ManualPostOfActivityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Activity", "Manual post of activity", err)
			}
			return nil, NewManualPostOfActivityUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Activity", "Manual post of activity", resp.StatusCode, string(body))
		}
	}
}

// BuildRefreshActivitiesOfAllCooperationServicesRequest instantiates a HTTP
// request object with method and path set to call the "Activity" service
// "Refresh activities of all cooperation services" endpoint
func (c *Client) BuildRefreshActivitiesOfAllCooperationServicesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RefreshActivitiesOfAllCooperationServicesActivityPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Activity", "Refresh activities of all cooperation services", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRefreshActivitiesOfAllCooperationServicesRequest returns an encoder
// for requests sent to the Activity Refresh activities of all cooperation
// services server.
func EncodeRefreshActivitiesOfAllCooperationServicesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*activity.SessionTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("Activity", "Refresh activities of all cooperation services", "*activity.SessionTokenPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		return nil
	}
}

// DecodeRefreshActivitiesOfAllCooperationServicesResponse returns a decoder
// for responses returned by the Activity Refresh activities of all cooperation
// services endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRefreshActivitiesOfAllCooperationServicesResponse may return the
// following errors:
//	- "unauthorized" (type activity.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeRefreshActivitiesOfAllCooperationServicesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RefreshActivitiesOfAllCooperationServicesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Activity", "Refresh activities of all cooperation services", err)
			}
			return nil, NewRefreshActivitiesOfAllCooperationServicesUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Activity", "Refresh activities of all cooperation services", resp.StatusCode, string(body))
		}
	}
}

// BuildRefreshQiitaActivitiesRequest instantiates a HTTP request object with
// method and path set to call the "Activity" service "Refresh qiita
// activities" endpoint
func (c *Client) BuildRefreshQiitaActivitiesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RefreshQiitaActivitiesActivityPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Activity", "Refresh qiita activities", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRefreshQiitaActivitiesRequest returns an encoder for requests sent to
// the Activity Refresh qiita activities server.
func EncodeRefreshQiitaActivitiesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*activity.SessionTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("Activity", "Refresh qiita activities", "*activity.SessionTokenPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		return nil
	}
}

// DecodeRefreshQiitaActivitiesResponse returns a decoder for responses
// returned by the Activity Refresh qiita activities endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeRefreshQiitaActivitiesResponse may return the following errors:
//	- "unauthorized" (type activity.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeRefreshQiitaActivitiesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RefreshQiitaActivitiesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Activity", "Refresh qiita activities", err)
			}
			return nil, NewRefreshQiitaActivitiesUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Activity", "Refresh qiita activities", resp.StatusCode, string(body))
		}
	}
}

// BuildPickOutAllPastActivitiesOfQiitaRequest instantiates a HTTP request
// object with method and path set to call the "Activity" service "Pick out all
// past activities of qiita" endpoint
func (c *Client) BuildPickOutAllPastActivitiesOfQiitaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PickOutAllPastActivitiesOfQiitaActivityPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Activity", "Pick out all past activities of qiita", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePickOutAllPastActivitiesOfQiitaRequest returns an encoder for requests
// sent to the Activity Pick out all past activities of qiita server.
func EncodePickOutAllPastActivitiesOfQiitaRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*activity.SessionTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("Activity", "Pick out all past activities of qiita", "*activity.SessionTokenPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		return nil
	}
}

// DecodePickOutAllPastActivitiesOfQiitaResponse returns a decoder for
// responses returned by the Activity Pick out all past activities of qiita
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodePickOutAllPastActivitiesOfQiitaResponse may return the following
// errors:
//	- "unauthorized" (type activity.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodePickOutAllPastActivitiesOfQiitaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body PickOutAllPastActivitiesOfQiitaUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Activity", "Pick out all past activities of qiita", err)
			}
			return nil, NewPickOutAllPastActivitiesOfQiitaUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Activity", "Pick out all past activities of qiita", resp.StatusCode, string(body))
		}
	}
}

// marshalActivityActivityToActivityRequestBody builds a value of type
// *ActivityRequestBody from a value of type *activity.Activity.
func marshalActivityActivityToActivityRequestBody(v *activity.Activity) *ActivityRequestBody {
	if v == nil {
		return nil
	}
	res := &ActivityRequestBody{
		ID:       v.ID,
		Category: v.Category,
		Rank:     v.Rank,
	}
	if v.UserTiny != nil {
		res.UserTiny = marshalActivityUserTinyToUserTinyRequestBody(v.UserTiny)
	}
	if v.Content != nil {
		res.Content = marshalActivityContentToContentRequestBody(v.Content)
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Favorites != nil {
		res.Favorites = make([]string, len(v.Favorites))
		for i, val := range v.Favorites {
			res.Favorites[i] = val
		}
	}
	if v.Gifts != nil {
		res.Gifts = make([]string, len(v.Gifts))
		for i, val := range v.Gifts {
			res.Gifts[i] = val
		}
	}

	return res
}

// marshalActivityUserTinyToUserTinyRequestBody builds a value of type
// *UserTinyRequestBody from a value of type *activity.UserTiny.
func marshalActivityUserTinyToUserTinyRequestBody(v *activity.UserTiny) *UserTinyRequestBody {
	res := &UserTinyRequestBody{
		UID:      v.UID,
		Name:     v.Name,
		PhotoURL: v.PhotoURL,
	}

	return res
}

// marshalActivityContentToContentRequestBody builds a value of type
// *ContentRequestBody from a value of type *activity.Content.
func marshalActivityContentToContentRequestBody(v *activity.Content) *ContentRequestBody {
	res := &ContentRequestBody{
		Subject: v.Subject,
		URL:     v.URL,
		Comment: v.Comment,
	}

	return res
}

// marshalActivityRequestBodyToActivityActivity builds a value of type
// *activity.Activity from a value of type *ActivityRequestBody.
func marshalActivityRequestBodyToActivityActivity(v *ActivityRequestBody) *activity.Activity {
	if v == nil {
		return nil
	}
	res := &activity.Activity{
		ID:       v.ID,
		Category: v.Category,
		Rank:     v.Rank,
	}
	if v.UserTiny != nil {
		res.UserTiny = marshalUserTinyRequestBodyToActivityUserTiny(v.UserTiny)
	}
	if v.Content != nil {
		res.Content = marshalContentRequestBodyToActivityContent(v.Content)
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Favorites != nil {
		res.Favorites = make([]string, len(v.Favorites))
		for i, val := range v.Favorites {
			res.Favorites[i] = val
		}
	}
	if v.Gifts != nil {
		res.Gifts = make([]string, len(v.Gifts))
		for i, val := range v.Gifts {
			res.Gifts[i] = val
		}
	}

	return res
}

// marshalUserTinyRequestBodyToActivityUserTiny builds a value of type
// *activity.UserTiny from a value of type *UserTinyRequestBody.
func marshalUserTinyRequestBodyToActivityUserTiny(v *UserTinyRequestBody) *activity.UserTiny {
	res := &activity.UserTiny{
		UID:      v.UID,
		Name:     v.Name,
		PhotoURL: v.PhotoURL,
	}

	return res
}

// marshalContentRequestBodyToActivityContent builds a value of type
// *activity.Content from a value of type *ContentRequestBody.
func marshalContentRequestBodyToActivityContent(v *ContentRequestBody) *activity.Content {
	res := &activity.Content{
		Subject: v.Subject,
		URL:     v.URL,
		Comment: v.Comment,
	}

	return res
}
