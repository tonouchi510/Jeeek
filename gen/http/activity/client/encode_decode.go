// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	activity "github.com/tonouchi510/Jeeek/gen/activity"
	goahttp "goa.design/goa/v3/http"
)

// BuildFetchQiitaArticleByQiitaUserIDRequest instantiates a HTTP request
// object with method and path set to call the "Activity" service "Fetch qiita
// article by qiita-user-id" endpoint
func (c *Client) BuildFetchQiitaArticleByQiitaUserIDRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID string
	)
	{
		p, ok := v.(*activity.GetActivityPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Activity", "Fetch qiita article by qiita-user-id", "*activity.GetActivityPayload", v)
		}
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FetchQiitaArticleByQiitaUserIDActivityPath(userID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Activity", "Fetch qiita article by qiita-user-id", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFetchQiitaArticleByQiitaUserIDRequest returns an encoder for requests
// sent to the Activity Fetch qiita article by qiita-user-id server.
func EncodeFetchQiitaArticleByQiitaUserIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*activity.GetActivityPayload)
		if !ok {
			return goahttp.ErrInvalidType("Activity", "Fetch qiita article by qiita-user-id", "*activity.GetActivityPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		return nil
	}
}

// DecodeFetchQiitaArticleByQiitaUserIDResponse returns a decoder for responses
// returned by the Activity Fetch qiita article by qiita-user-id endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeFetchQiitaArticleByQiitaUserIDResponse may return the following errors:
//	- "unauthorized" (type activity.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeFetchQiitaArticleByQiitaUserIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body FetchQiitaArticleByQiitaUserIDUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Activity", "Fetch qiita article by qiita-user-id", err)
			}
			return nil, NewFetchQiitaArticleByQiitaUserIDUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Activity", "Fetch qiita article by qiita-user-id", resp.StatusCode, string(body))
		}
	}
}
