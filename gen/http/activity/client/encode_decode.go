// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	activity "github.com/tonouchi510/Jeeek/gen/activity"
	goahttp "goa.design/goa/v3/http"
)

// BuildReflectionActivityRequest instantiates a HTTP request object with
// method and path set to call the "Activity" service "Reflection activity"
// endpoint
func (c *Client) BuildReflectionActivityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReflectionActivityActivityPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Activity", "Reflection activity", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReflectionActivityRequest returns an encoder for requests sent to the
// Activity Reflection activity server.
func EncodeReflectionActivityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*activity.ActivityPostPayload)
		if !ok {
			return goahttp.ErrInvalidType("Activity", "Reflection activity", "*activity.ActivityPostPayload", v)
		}
		if p.Token != nil {
			req.Header.Set("Authorization", *p.Token)
		}
		body := NewReflectionActivityRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Activity", "Reflection activity", err)
		}
		return nil
	}
}

// DecodeReflectionActivityResponse returns a decoder for responses returned by
// the Activity Reflection activity endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeReflectionActivityResponse may return the following errors:
//	- "unauthorized" (type activity.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeReflectionActivityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body ReflectionActivityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Activity", "Reflection activity", err)
			}
			return nil, NewReflectionActivityUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Activity", "Reflection activity", resp.StatusCode, string(body))
		}
	}
}

// marshalActivityAttributesToAttributesRequestBody builds a value of type
// *AttributesRequestBody from a value of type *activity.Attributes.
func marshalActivityAttributesToAttributesRequestBody(v *activity.Attributes) *AttributesRequestBody {
	if v == nil {
		return nil
	}
	res := &AttributesRequestBody{
		UID: v.UID,
	}

	return res
}

// marshalAttributesRequestBodyToActivityAttributes builds a value of type
// *activity.Attributes from a value of type *AttributesRequestBody.
func marshalAttributesRequestBodyToActivityAttributes(v *AttributesRequestBody) *activity.Attributes {
	if v == nil {
		return nil
	}
	res := &activity.Attributes{
		UID: v.UID,
	}

	return res
}
