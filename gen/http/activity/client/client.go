// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity client HTTP transport
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Activity service endpoint HTTP clients.
type Client struct {
	// FetchQiitaArticleByQiitaUserID Doer is the HTTP client used to make requests
	// to the Fetch qiita article by qiita-user-id endpoint.
	FetchQiitaArticleByQiitaUserIDDoer goahttp.Doer

	// BatchJobMethodToRefreshQiitaActivity Doer is the HTTP client used to make
	// requests to the Batch job method to refresh qiita activity endpoint.
	BatchJobMethodToRefreshQiitaActivityDoer goahttp.Doer

	// PickOutPastActivityOfQiita Doer is the HTTP client used to make requests to
	// the Pick out past activity of qiita endpoint.
	PickOutPastActivityOfQiitaDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Activity service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		FetchQiitaArticleByQiitaUserIDDoer:       doer,
		BatchJobMethodToRefreshQiitaActivityDoer: doer,
		PickOutPastActivityOfQiitaDoer:           doer,
		RestoreResponseBody:                      restoreBody,
		scheme:                                   scheme,
		host:                                     host,
		decoder:                                  dec,
		encoder:                                  enc,
	}
}

// FetchQiitaArticleByQiitaUserID returns an endpoint that makes HTTP requests
// to the Activity service Fetch qiita article by qiita-user-id server.
func (c *Client) FetchQiitaArticleByQiitaUserID() goa.Endpoint {
	var (
		encodeRequest  = EncodeFetchQiitaArticleByQiitaUserIDRequest(c.encoder)
		decodeResponse = DecodeFetchQiitaArticleByQiitaUserIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFetchQiitaArticleByQiitaUserIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FetchQiitaArticleByQiitaUserIDDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Fetch qiita article by qiita-user-id", err)
		}
		return decodeResponse(resp)
	}
}

// BatchJobMethodToRefreshQiitaActivity returns an endpoint that makes HTTP
// requests to the Activity service Batch job method to refresh qiita activity
// server.
func (c *Client) BatchJobMethodToRefreshQiitaActivity() goa.Endpoint {
	var (
		decodeResponse = DecodeBatchJobMethodToRefreshQiitaActivityResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBatchJobMethodToRefreshQiitaActivityRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BatchJobMethodToRefreshQiitaActivityDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Batch job method to refresh qiita activity", err)
		}
		return decodeResponse(resp)
	}
}

// PickOutPastActivityOfQiita returns an endpoint that makes HTTP requests to
// the Activity service Pick out past activity of qiita server.
func (c *Client) PickOutPastActivityOfQiita() goa.Endpoint {
	var (
		encodeRequest  = EncodePickOutPastActivityOfQiitaRequest(c.encoder)
		decodeResponse = DecodePickOutPastActivityOfQiitaResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPickOutPastActivityOfQiitaRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PickOutPastActivityOfQiitaDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Pick out past activity of qiita", err)
		}
		return decodeResponse(resp)
	}
}
