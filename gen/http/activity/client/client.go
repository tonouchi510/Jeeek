// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity client HTTP transport
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Activity service endpoint HTTP clients.
type Client struct {
	// ManualPostOfActivity Doer is the HTTP client used to make requests to the
	// Manual post of activity endpoint.
	ManualPostOfActivityDoer goahttp.Doer

	// RefreshActivitiesOfAllCooperationServices Doer is the HTTP client used to
	// make requests to the Refresh activities of all cooperation services endpoint.
	RefreshActivitiesOfAllCooperationServicesDoer goahttp.Doer

	// RefreshQiitaActivities Doer is the HTTP client used to make requests to the
	// Refresh qiita activities endpoint.
	RefreshQiitaActivitiesDoer goahttp.Doer

	// PickOutAllPastActivitiesOfQiita Doer is the HTTP client used to make
	// requests to the Pick out all past activities of qiita endpoint.
	PickOutAllPastActivitiesOfQiitaDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Activity service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ManualPostOfActivityDoer:                      doer,
		RefreshActivitiesOfAllCooperationServicesDoer: doer,
		RefreshQiitaActivitiesDoer:                    doer,
		PickOutAllPastActivitiesOfQiitaDoer:           doer,
		RestoreResponseBody:                           restoreBody,
		scheme:                                        scheme,
		host:                                          host,
		decoder:                                       dec,
		encoder:                                       enc,
	}
}

// ManualPostOfActivity returns an endpoint that makes HTTP requests to the
// Activity service Manual post of activity server.
func (c *Client) ManualPostOfActivity() goa.Endpoint {
	var (
		encodeRequest  = EncodeManualPostOfActivityRequest(c.encoder)
		decodeResponse = DecodeManualPostOfActivityResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildManualPostOfActivityRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ManualPostOfActivityDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Manual post of activity", err)
		}
		return decodeResponse(resp)
	}
}

// RefreshActivitiesOfAllCooperationServices returns an endpoint that makes
// HTTP requests to the Activity service Refresh activities of all cooperation
// services server.
func (c *Client) RefreshActivitiesOfAllCooperationServices() goa.Endpoint {
	var (
		encodeRequest  = EncodeRefreshActivitiesOfAllCooperationServicesRequest(c.encoder)
		decodeResponse = DecodeRefreshActivitiesOfAllCooperationServicesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRefreshActivitiesOfAllCooperationServicesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RefreshActivitiesOfAllCooperationServicesDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Refresh activities of all cooperation services", err)
		}
		return decodeResponse(resp)
	}
}

// RefreshQiitaActivities returns an endpoint that makes HTTP requests to the
// Activity service Refresh qiita activities server.
func (c *Client) RefreshQiitaActivities() goa.Endpoint {
	var (
		encodeRequest  = EncodeRefreshQiitaActivitiesRequest(c.encoder)
		decodeResponse = DecodeRefreshQiitaActivitiesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRefreshQiitaActivitiesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RefreshQiitaActivitiesDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Refresh qiita activities", err)
		}
		return decodeResponse(resp)
	}
}

// PickOutAllPastActivitiesOfQiita returns an endpoint that makes HTTP requests
// to the Activity service Pick out all past activities of qiita server.
func (c *Client) PickOutAllPastActivitiesOfQiita() goa.Endpoint {
	var (
		encodeRequest  = EncodePickOutAllPastActivitiesOfQiitaRequest(c.encoder)
		decodeResponse = DecodePickOutAllPastActivitiesOfQiitaResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPickOutAllPastActivitiesOfQiitaRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PickOutAllPastActivitiesOfQiitaDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Pick out all past activities of qiita", err)
		}
		return decodeResponse(resp)
	}
}
