// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity client HTTP transport
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Activity service endpoint HTTP clients.
type Client struct {
	// ManualActivityPost Doer is the HTTP client used to make requests to the
	// Manual activity post endpoint.
	ManualActivityPostDoer goahttp.Doer

	// ReflectionActivity Doer is the HTTP client used to make requests to the
	// Reflection activity endpoint.
	ReflectionActivityDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Activity service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ManualActivityPostDoer: doer,
		ReflectionActivityDoer: doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// ManualActivityPost returns an endpoint that makes HTTP requests to the
// Activity service Manual activity post server.
func (c *Client) ManualActivityPost() goa.Endpoint {
	var (
		encodeRequest  = EncodeManualActivityPostRequest(c.encoder)
		decodeResponse = DecodeManualActivityPostResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildManualActivityPostRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ManualActivityPostDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Manual activity post", err)
		}
		return decodeResponse(resp)
	}
}

// ReflectionActivity returns an endpoint that makes HTTP requests to the
// Activity service Reflection activity server.
func (c *Client) ReflectionActivity() goa.Endpoint {
	var (
		encodeRequest  = EncodeReflectionActivityRequest(c.encoder)
		decodeResponse = DecodeReflectionActivityResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildReflectionActivityRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReflectionActivityDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Activity", "Reflection activity", err)
		}
		return decodeResponse(resp)
	}
}
