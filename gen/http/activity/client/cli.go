// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Activity HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package client

import (
	"encoding/json"
	"fmt"

	activity "github.com/tonouchi510/Jeeek/gen/activity"
)

// BuildManualPostOfActivityPayload builds the payload for the Activity Manual
// post of activity endpoint from CLI flags.
func BuildManualPostOfActivityPayload(activityManualPostOfActivityBody string, activityManualPostOfActivityToken string) (*activity.ActivityPostPayload, error) {
	var err error
	var body ManualPostOfActivityRequestBody
	{
		err = json.Unmarshal([]byte(activityManualPostOfActivityBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Activity\": {\n         \"category\": 0,\n         \"content\": {\n            \"comment\": \"ロジスティック回帰が使われている理由がよくわかった\",\n            \"subject\": \"PRML本の4章を読んだ。\",\n            \"url\": \"https://www.amazon.co.jp/パターン認識と機械学習-上-C-M-ビショップ/dp/4621061224\"\n         },\n         \"favorites\": [\n            \"4sra3r4zibfrzp4i\",\n            \"akkynv4v3v8d5evx\"\n         ],\n         \"gifts\": [],\n         \"id\": \"0000abcds6z57pqbpkin\",\n         \"rank\": 0,\n         \"tags\": [\n            \"Golang\",\n            \"GCP\"\n         ],\n         \"userTiny\": {\n            \"name\": \"トノウチ\",\n            \"photoUrl\": \"https://storage.tenki.jp/storage/static-images/suppl/article/image/9/97/971/9711/1/large.jpg\",\n            \"uid\": \"p2qfpb2gvxrzedu2\"\n         }\n      }\n   }'")
		}
	}
	var token *string
	{
		if activityManualPostOfActivityToken != "" {
			token = &activityManualPostOfActivityToken
		}
	}
	v := &activity.ActivityPostPayload{}
	if body.Activity != nil {
		v.Activity = marshalActivityRequestBodyToActivityActivity(body.Activity)
	}
	v.Token = token
	return v, nil
}

// BuildRefreshActivitiesOfAllCooperationServicesPayload builds the payload for
// the Activity Refresh activities of all cooperation services endpoint from
// CLI flags.
func BuildRefreshActivitiesOfAllCooperationServicesPayload(activityRefreshActivitiesOfAllCooperationServicesToken string) (*activity.SessionTokenPayload, error) {
	var token *string
	{
		if activityRefreshActivitiesOfAllCooperationServicesToken != "" {
			token = &activityRefreshActivitiesOfAllCooperationServicesToken
		}
	}
	payload := &activity.SessionTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildRefreshQiitaActivitiesPayload builds the payload for the Activity
// Refresh qiita activities endpoint from CLI flags.
func BuildRefreshQiitaActivitiesPayload(activityRefreshQiitaActivitiesToken string) (*activity.SessionTokenPayload, error) {
	var token *string
	{
		if activityRefreshQiitaActivitiesToken != "" {
			token = &activityRefreshQiitaActivitiesToken
		}
	}
	payload := &activity.SessionTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildPickOutAllPastActivitiesOfQiitaPayload builds the payload for the
// Activity Pick out all past activities of qiita endpoint from CLI flags.
func BuildPickOutAllPastActivitiesOfQiitaPayload(activityPickOutAllPastActivitiesOfQiitaToken string) (*activity.SessionTokenPayload, error) {
	var token *string
	{
		if activityPickOutAllPastActivitiesOfQiitaToken != "" {
			token = &activityPickOutAllPastActivitiesOfQiitaToken
		}
	}
	payload := &activity.SessionTokenPayload{
		Token: token,
	}
	return payload, nil
}
