// Code generated by goa v3.0.7, DO NOT EDIT.
//
// ExternalActivity HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/tonouchi510/Jeeek/design

package server

import (
	"context"
	"net/http"
	"strings"

	externalactivity "github.com/tonouchi510/Jeeek/gen/external_activity"
	goahttp "goa.design/goa/v3/http"
)

// EncodeRefreshActivitiesOfExternalServicesResponse returns an encoder for
// responses returned by the ExternalActivity Refresh activities of external
// services endpoint.
func EncodeRefreshActivitiesOfExternalServicesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeRefreshActivitiesOfExternalServicesRequest returns a decoder for
// requests sent to the ExternalActivity Refresh activities of external
// services endpoint.
func DecodeRefreshActivitiesOfExternalServicesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewRefreshActivitiesOfExternalServicesSessionTokenPayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeRefreshActivitiesOfExternalServicesError returns an encoder for errors
// returned by the Refresh activities of external services ExternalActivity
// endpoint.
func EncodeRefreshActivitiesOfExternalServicesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(externalactivity.Unauthorized)
			enc := encoder(ctx, w)
			body := NewRefreshActivitiesOfExternalServicesUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRefreshQiitaActivityResponse returns an encoder for responses returned
// by the ExternalActivity Refresh qiita activity endpoint.
func EncodeRefreshQiitaActivityResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeRefreshQiitaActivityRequest returns a decoder for requests sent to the
// ExternalActivity Refresh qiita activity endpoint.
func DecodeRefreshQiitaActivityRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewRefreshQiitaActivitySessionTokenPayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeRefreshQiitaActivityError returns an encoder for errors returned by
// the Refresh qiita activity ExternalActivity endpoint.
func EncodeRefreshQiitaActivityError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(externalactivity.Unauthorized)
			enc := encoder(ctx, w)
			body := NewRefreshQiitaActivityUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodePickOutPastActivityOfQiitaResponse returns an encoder for responses
// returned by the ExternalActivity Pick out past activity of qiita endpoint.
func EncodePickOutPastActivityOfQiitaResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodePickOutPastActivityOfQiitaRequest returns a decoder for requests sent
// to the ExternalActivity Pick out past activity of qiita endpoint.
func DecodePickOutPastActivityOfQiitaRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewPickOutPastActivityOfQiitaSessionTokenPayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodePickOutPastActivityOfQiitaError returns an encoder for errors returned
// by the Pick out past activity of qiita ExternalActivity endpoint.
func EncodePickOutPastActivityOfQiitaError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(externalactivity.Unauthorized)
			enc := encoder(ctx, w)
			body := NewPickOutPastActivityOfQiitaUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
